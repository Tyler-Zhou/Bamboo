//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3603
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LongWin.EDI.FileManager {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("COSCOBookingDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class COSCOBookingDataSet : global::System.Data.DataSet {
        
        private EDIDocumentDataTable tableEDIDocument;
        
        private COSCOBookingsDataTable tableCOSCOBookings;
        
        private ContainerListDataTable tableContainerList;
        
        private PortListDataTable tablePortList;
        
        private global::System.Data.DataRelation relationContainerList_COSCOBookings;
        
        private global::System.Data.DataRelation relationCOSCOBookings_PortList;
        
        private global::System.Data.DataRelation relationCOSCOBookings_EDIDocument;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public COSCOBookingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected COSCOBookingDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["EDIDocument"] != null)) {
                    base.Tables.Add(new EDIDocumentDataTable(ds.Tables["EDIDocument"]));
                }
                if ((ds.Tables["COSCOBookings"] != null)) {
                    base.Tables.Add(new COSCOBookingsDataTable(ds.Tables["COSCOBookings"]));
                }
                if ((ds.Tables["ContainerList"] != null)) {
                    base.Tables.Add(new ContainerListDataTable(ds.Tables["ContainerList"]));
                }
                if ((ds.Tables["PortList"] != null)) {
                    base.Tables.Add(new PortListDataTable(ds.Tables["PortList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EDIDocumentDataTable EDIDocument {
            get {
                return this.tableEDIDocument;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public COSCOBookingsDataTable COSCOBookings {
            get {
                return this.tableCOSCOBookings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContainerListDataTable ContainerList {
            get {
                return this.tableContainerList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PortListDataTable PortList {
            get {
                return this.tablePortList;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            COSCOBookingDataSet cln = ((COSCOBookingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EDIDocument"] != null)) {
                    base.Tables.Add(new EDIDocumentDataTable(ds.Tables["EDIDocument"]));
                }
                if ((ds.Tables["COSCOBookings"] != null)) {
                    base.Tables.Add(new COSCOBookingsDataTable(ds.Tables["COSCOBookings"]));
                }
                if ((ds.Tables["ContainerList"] != null)) {
                    base.Tables.Add(new ContainerListDataTable(ds.Tables["ContainerList"]));
                }
                if ((ds.Tables["PortList"] != null)) {
                    base.Tables.Add(new PortListDataTable(ds.Tables["PortList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEDIDocument = ((EDIDocumentDataTable)(base.Tables["EDIDocument"]));
            if ((initTable == true)) {
                if ((this.tableEDIDocument != null)) {
                    this.tableEDIDocument.InitVars();
                }
            }
            this.tableCOSCOBookings = ((COSCOBookingsDataTable)(base.Tables["COSCOBookings"]));
            if ((initTable == true)) {
                if ((this.tableCOSCOBookings != null)) {
                    this.tableCOSCOBookings.InitVars();
                }
            }
            this.tableContainerList = ((ContainerListDataTable)(base.Tables["ContainerList"]));
            if ((initTable == true)) {
                if ((this.tableContainerList != null)) {
                    this.tableContainerList.InitVars();
                }
            }
            this.tablePortList = ((PortListDataTable)(base.Tables["PortList"]));
            if ((initTable == true)) {
                if ((this.tablePortList != null)) {
                    this.tablePortList.InitVars();
                }
            }
            this.relationContainerList_COSCOBookings = this.Relations["ContainerList_COSCOBookings"];
            this.relationCOSCOBookings_PortList = this.Relations["COSCOBookings_PortList"];
            this.relationCOSCOBookings_EDIDocument = this.Relations["COSCOBookings_EDIDocument"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "COSCOBookingDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/COSCOBookingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEDIDocument = new EDIDocumentDataTable();
            base.Tables.Add(this.tableEDIDocument);
            this.tableCOSCOBookings = new COSCOBookingsDataTable();
            base.Tables.Add(this.tableCOSCOBookings);
            this.tableContainerList = new ContainerListDataTable();
            base.Tables.Add(this.tableContainerList);
            this.tablePortList = new PortListDataTable();
            base.Tables.Add(this.tablePortList);
            this.relationContainerList_COSCOBookings = new global::System.Data.DataRelation("ContainerList_COSCOBookings", new global::System.Data.DataColumn[] {
                        this.tableCOSCOBookings.JobIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableContainerList.JobIDColumn}, false);
            this.relationContainerList_COSCOBookings.Nested = true;
            this.Relations.Add(this.relationContainerList_COSCOBookings);
            this.relationCOSCOBookings_PortList = new global::System.Data.DataRelation("COSCOBookings_PortList", new global::System.Data.DataColumn[] {
                        this.tableCOSCOBookings.JobIDColumn}, new global::System.Data.DataColumn[] {
                        this.tablePortList.JobIDColumn}, false);
            this.relationCOSCOBookings_PortList.Nested = true;
            this.Relations.Add(this.relationCOSCOBookings_PortList);
            this.relationCOSCOBookings_EDIDocument = new global::System.Data.DataRelation("COSCOBookings_EDIDocument", new global::System.Data.DataColumn[] {
                        this.tableEDIDocument.IDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCOSCOBookings.DocumentIDColumn}, false);
            this.relationCOSCOBookings_EDIDocument.Nested = true;
            this.Relations.Add(this.relationCOSCOBookings_EDIDocument);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEDIDocument() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCOSCOBookings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContainerList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePortList() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            COSCOBookingDataSet ds = new COSCOBookingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EDIDocumentRowChangeEventHandler(object sender, EDIDocumentRowChangeEvent e);
        
        public delegate void COSCOBookingsRowChangeEventHandler(object sender, COSCOBookingsRowChangeEvent e);
        
        public delegate void ContainerListRowChangeEventHandler(object sender, ContainerListRowChangeEvent e);
        
        public delegate void PortListRowChangeEventHandler(object sender, PortListRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EDIDocumentDataTable : global::System.Data.TypedTableBase<EDIDocumentRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnCompanyCode;
            
            private global::System.Data.DataColumn columnCompanyInfo;
            
            private global::System.Data.DataColumn columnSendDate;
            
            private global::System.Data.DataColumn columnDocumentNo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentDataTable() {
                this.TableName = "EDIDocument";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EDIDocumentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected EDIDocumentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyCodeColumn {
                get {
                    return this.columnCompanyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompanyInfoColumn {
                get {
                    return this.columnCompanyInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SendDateColumn {
                get {
                    return this.columnSendDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentNoColumn {
                get {
                    return this.columnDocumentNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentRow this[int index] {
                get {
                    return ((EDIDocumentRow)(this.Rows[index]));
                }
            }
            
            public event EDIDocumentRowChangeEventHandler EDIDocumentRowChanging;
            
            public event EDIDocumentRowChangeEventHandler EDIDocumentRowChanged;
            
            public event EDIDocumentRowChangeEventHandler EDIDocumentRowDeleting;
            
            public event EDIDocumentRowChangeEventHandler EDIDocumentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEDIDocumentRow(EDIDocumentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentRow AddEDIDocumentRow(string ID, string CompanyCode, string CompanyInfo, System.DateTime SendDate, string DocumentNo) {
                EDIDocumentRow rowEDIDocumentRow = ((EDIDocumentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        CompanyCode,
                        CompanyInfo,
                        SendDate,
                        DocumentNo};
                rowEDIDocumentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEDIDocumentRow);
                return rowEDIDocumentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentRow FindByID(string ID) {
                return ((EDIDocumentRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EDIDocumentDataTable cln = ((EDIDocumentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EDIDocumentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnCompanyCode = base.Columns["CompanyCode"];
                this.columnCompanyInfo = base.Columns["CompanyInfo"];
                this.columnSendDate = base.Columns["SendDate"];
                this.columnDocumentNo = base.Columns["DocumentNo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCompanyCode = new global::System.Data.DataColumn("CompanyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyCode);
                this.columnCompanyInfo = new global::System.Data.DataColumn("CompanyInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompanyInfo);
                this.columnSendDate = new global::System.Data.DataColumn("SendDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSendDate);
                this.columnDocumentNo = new global::System.Data.DataColumn("DocumentNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentNo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("EDIDocumentKey1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.columnSendDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentRow NewEDIDocumentRow() {
                return ((EDIDocumentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EDIDocumentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EDIDocumentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EDIDocumentRowChanged != null)) {
                    this.EDIDocumentRowChanged(this, new EDIDocumentRowChangeEvent(((EDIDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EDIDocumentRowChanging != null)) {
                    this.EDIDocumentRowChanging(this, new EDIDocumentRowChangeEvent(((EDIDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EDIDocumentRowDeleted != null)) {
                    this.EDIDocumentRowDeleted(this, new EDIDocumentRowChangeEvent(((EDIDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EDIDocumentRowDeleting != null)) {
                    this.EDIDocumentRowDeleting(this, new EDIDocumentRowChangeEvent(((EDIDocumentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEDIDocumentRow(EDIDocumentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COSCOBookingDataSet ds = new COSCOBookingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EDIDocumentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class COSCOBookingsDataTable : global::System.Data.TypedTableBase<COSCOBookingsRow> {
            
            private global::System.Data.DataColumn columnJobID;
            
            private global::System.Data.DataColumn columnJobNo;
            
            private global::System.Data.DataColumn columnPOLCode;
            
            private global::System.Data.DataColumn columnPOLName;
            
            private global::System.Data.DataColumn columnPODCode;
            
            private global::System.Data.DataColumn columnPODName;
            
            private global::System.Data.DataColumn columnExpectedShipDate;
            
            private global::System.Data.DataColumn columnEstimatedDeliveryDate;
            
            private global::System.Data.DataColumn columnExpectedArriveDate;
            
            private global::System.Data.DataColumn columnPaymentType;
            
            private global::System.Data.DataColumn columnShipperInfo;
            
            private global::System.Data.DataColumn columnConisgneeInfo;
            
            private global::System.Data.DataColumn columnAgentDescription;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnTime;
            
            private global::System.Data.DataColumn columnDocumentID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsDataTable() {
                this.TableName = "COSCOBookings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COSCOBookingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected COSCOBookingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobIDColumn {
                get {
                    return this.columnJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobNoColumn {
                get {
                    return this.columnJobNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POLCodeColumn {
                get {
                    return this.columnPOLCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POLNameColumn {
                get {
                    return this.columnPOLName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PODCodeColumn {
                get {
                    return this.columnPODCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PODNameColumn {
                get {
                    return this.columnPODName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedShipDateColumn {
                get {
                    return this.columnExpectedShipDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EstimatedDeliveryDateColumn {
                get {
                    return this.columnEstimatedDeliveryDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExpectedArriveDateColumn {
                get {
                    return this.columnExpectedArriveDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentTypeColumn {
                get {
                    return this.columnPaymentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShipperInfoColumn {
                get {
                    return this.columnShipperInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConisgneeInfoColumn {
                get {
                    return this.columnConisgneeInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentDescriptionColumn {
                get {
                    return this.columnAgentDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DocumentIDColumn {
                get {
                    return this.columnDocumentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow this[int index] {
                get {
                    return ((COSCOBookingsRow)(this.Rows[index]));
                }
            }
            
            public event COSCOBookingsRowChangeEventHandler COSCOBookingsRowChanging;
            
            public event COSCOBookingsRowChangeEventHandler COSCOBookingsRowChanged;
            
            public event COSCOBookingsRowChangeEventHandler COSCOBookingsRowDeleting;
            
            public event COSCOBookingsRowChangeEventHandler COSCOBookingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCOSCOBookingsRow(COSCOBookingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow AddCOSCOBookingsRow(
                        string JobID, 
                        string JobNo, 
                        string POLCode, 
                        string POLName, 
                        System.DateTime PODCode, 
                        System.DateTime PODName, 
                        string ExpectedShipDate, 
                        string EstimatedDeliveryDate, 
                        string ExpectedArriveDate, 
                        string PaymentType, 
                        string ShipperInfo, 
                        string ConisgneeInfo, 
                        string AgentDescription, 
                        string Date, 
                        string Time, 
                        EDIDocumentRow parentEDIDocumentRowByCOSCOBookings_EDIDocument) {
                COSCOBookingsRow rowCOSCOBookingsRow = ((COSCOBookingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        JobID,
                        JobNo,
                        POLCode,
                        POLName,
                        PODCode,
                        PODName,
                        ExpectedShipDate,
                        EstimatedDeliveryDate,
                        ExpectedArriveDate,
                        PaymentType,
                        ShipperInfo,
                        ConisgneeInfo,
                        AgentDescription,
                        Date,
                        Time,
                        null};
                if ((parentEDIDocumentRowByCOSCOBookings_EDIDocument != null)) {
                    columnValuesArray[15] = parentEDIDocumentRowByCOSCOBookings_EDIDocument[0];
                }
                rowCOSCOBookingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCOSCOBookingsRow);
                return rowCOSCOBookingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow FindByJobID(string JobID) {
                return ((COSCOBookingsRow)(this.Rows.Find(new object[] {
                            JobID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                COSCOBookingsDataTable cln = ((COSCOBookingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new COSCOBookingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobID = base.Columns["JobID"];
                this.columnJobNo = base.Columns["JobNo"];
                this.columnPOLCode = base.Columns["POLCode"];
                this.columnPOLName = base.Columns["POLName"];
                this.columnPODCode = base.Columns["PODCode"];
                this.columnPODName = base.Columns["PODName"];
                this.columnExpectedShipDate = base.Columns["ExpectedShipDate"];
                this.columnEstimatedDeliveryDate = base.Columns["EstimatedDeliveryDate"];
                this.columnExpectedArriveDate = base.Columns["ExpectedArriveDate"];
                this.columnPaymentType = base.Columns["PaymentType"];
                this.columnShipperInfo = base.Columns["ShipperInfo"];
                this.columnConisgneeInfo = base.Columns["ConisgneeInfo"];
                this.columnAgentDescription = base.Columns["AgentDescription"];
                this.columnDate = base.Columns["Date"];
                this.columnTime = base.Columns["Time"];
                this.columnDocumentID = base.Columns["DocumentID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobID = new global::System.Data.DataColumn("JobID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobID);
                this.columnJobNo = new global::System.Data.DataColumn("JobNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobNo);
                this.columnPOLCode = new global::System.Data.DataColumn("POLCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOLCode);
                this.columnPOLName = new global::System.Data.DataColumn("POLName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOLName);
                this.columnPODCode = new global::System.Data.DataColumn("PODCode", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPODCode);
                this.columnPODName = new global::System.Data.DataColumn("PODName", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPODName);
                this.columnExpectedShipDate = new global::System.Data.DataColumn("ExpectedShipDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedShipDate);
                this.columnEstimatedDeliveryDate = new global::System.Data.DataColumn("EstimatedDeliveryDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEstimatedDeliveryDate);
                this.columnExpectedArriveDate = new global::System.Data.DataColumn("ExpectedArriveDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpectedArriveDate);
                this.columnPaymentType = new global::System.Data.DataColumn("PaymentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentType);
                this.columnShipperInfo = new global::System.Data.DataColumn("ShipperInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShipperInfo);
                this.columnConisgneeInfo = new global::System.Data.DataColumn("ConisgneeInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConisgneeInfo);
                this.columnAgentDescription = new global::System.Data.DataColumn("AgentDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentDescription);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnTime = new global::System.Data.DataColumn("Time", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnDocumentID = new global::System.Data.DataColumn("DocumentID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("MBLKey1", new global::System.Data.DataColumn[] {
                                this.columnJobID}, true));
                this.columnJobID.AllowDBNull = false;
                this.columnJobID.Unique = true;
                this.columnJobID.Caption = "Id";
                this.columnJobNo.Caption = "RefNo";
                this.columnPOLCode.Caption = "No";
                this.columnPOLName.Caption = "No";
                this.columnPODCode.Caption = "Date";
                this.columnPODName.Caption = "Date";
                this.columnExpectedShipDate.Caption = "SoNo";
                this.columnEstimatedDeliveryDate.Caption = "DeliveryTerm";
                this.columnExpectedArriveDate.Caption = "PaymentTerm";
                this.columnPaymentType.Caption = "PayLocCode";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow NewCOSCOBookingsRow() {
                return ((COSCOBookingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new COSCOBookingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(COSCOBookingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.COSCOBookingsRowChanged != null)) {
                    this.COSCOBookingsRowChanged(this, new COSCOBookingsRowChangeEvent(((COSCOBookingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.COSCOBookingsRowChanging != null)) {
                    this.COSCOBookingsRowChanging(this, new COSCOBookingsRowChangeEvent(((COSCOBookingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.COSCOBookingsRowDeleted != null)) {
                    this.COSCOBookingsRowDeleted(this, new COSCOBookingsRowChangeEvent(((COSCOBookingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.COSCOBookingsRowDeleting != null)) {
                    this.COSCOBookingsRowDeleting(this, new COSCOBookingsRowChangeEvent(((COSCOBookingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCOSCOBookingsRow(COSCOBookingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COSCOBookingDataSet ds = new COSCOBookingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "COSCOBookingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContainerListDataTable : global::System.Data.TypedTableBase<ContainerListRow> {
            
            private global::System.Data.DataColumn columnContainerCount;
            
            private global::System.Data.DataColumn columnContainerType;
            
            private global::System.Data.DataColumn columnJobID;
            
            private global::System.Data.DataColumn columnID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListDataTable() {
                this.TableName = "ContainerList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContainerListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContainerListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerCountColumn {
                get {
                    return this.columnContainerCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerTypeColumn {
                get {
                    return this.columnContainerType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobIDColumn {
                get {
                    return this.columnJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListRow this[int index] {
                get {
                    return ((ContainerListRow)(this.Rows[index]));
                }
            }
            
            public event ContainerListRowChangeEventHandler ContainerListRowChanging;
            
            public event ContainerListRowChangeEventHandler ContainerListRowChanged;
            
            public event ContainerListRowChangeEventHandler ContainerListRowDeleting;
            
            public event ContainerListRowChangeEventHandler ContainerListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContainerListRow(ContainerListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListRow AddContainerListRow(string ContainerCount, string ContainerType, COSCOBookingsRow parentCOSCOBookingsRowByContainerList_COSCOBookings, string ID) {
                ContainerListRow rowContainerListRow = ((ContainerListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ContainerCount,
                        ContainerType,
                        null,
                        ID};
                if ((parentCOSCOBookingsRowByContainerList_COSCOBookings != null)) {
                    columnValuesArray[2] = parentCOSCOBookingsRowByContainerList_COSCOBookings[0];
                }
                rowContainerListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContainerListRow);
                return rowContainerListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListRow FindByID(string ID) {
                return ((ContainerListRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContainerListDataTable cln = ((ContainerListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContainerListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContainerCount = base.Columns["ContainerCount"];
                this.columnContainerType = base.Columns["ContainerType"];
                this.columnJobID = base.Columns["JobID"];
                this.columnID = base.Columns["ID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContainerCount = new global::System.Data.DataColumn("ContainerCount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerCount);
                this.columnContainerType = new global::System.Data.DataColumn("ContainerType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerType);
                this.columnJobID = new global::System.Data.DataColumn("JobID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobID);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.Namespace = "http://tempuri.org/COSCOBookingDataSet.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListRow NewContainerListRow() {
                return ((ContainerListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContainerListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContainerListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContainerListRowChanged != null)) {
                    this.ContainerListRowChanged(this, new ContainerListRowChangeEvent(((ContainerListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContainerListRowChanging != null)) {
                    this.ContainerListRowChanging(this, new ContainerListRowChangeEvent(((ContainerListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContainerListRowDeleted != null)) {
                    this.ContainerListRowDeleted(this, new ContainerListRowChangeEvent(((ContainerListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContainerListRowDeleting != null)) {
                    this.ContainerListRowDeleting(this, new ContainerListRowChangeEvent(((ContainerListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContainerListRow(ContainerListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COSCOBookingDataSet ds = new COSCOBookingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContainerListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PortListDataTable : global::System.Data.TypedTableBase<PortListRow> {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnPortType;
            
            private global::System.Data.DataColumn columnPortName;
            
            private global::System.Data.DataColumn columnJobID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListDataTable() {
                this.TableName = "PortList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortListDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PortListDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortTypeColumn {
                get {
                    return this.columnPortType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PortNameColumn {
                get {
                    return this.columnPortName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobIDColumn {
                get {
                    return this.columnJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListRow this[int index] {
                get {
                    return ((PortListRow)(this.Rows[index]));
                }
            }
            
            public event PortListRowChangeEventHandler PortListRowChanging;
            
            public event PortListRowChangeEventHandler PortListRowChanged;
            
            public event PortListRowChangeEventHandler PortListRowDeleting;
            
            public event PortListRowChangeEventHandler PortListRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPortListRow(PortListRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListRow AddPortListRow(string ID, string PortType, string PortName, COSCOBookingsRow parentCOSCOBookingsRowByCOSCOBookings_PortList) {
                PortListRow rowPortListRow = ((PortListRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        PortType,
                        PortName,
                        null};
                if ((parentCOSCOBookingsRowByCOSCOBookings_PortList != null)) {
                    columnValuesArray[3] = parentCOSCOBookingsRowByCOSCOBookings_PortList[0];
                }
                rowPortListRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPortListRow);
                return rowPortListRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListRow FindByID(string ID) {
                return ((PortListRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PortListDataTable cln = ((PortListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PortListDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnPortType = base.Columns["PortType"];
                this.columnPortName = base.Columns["PortName"];
                this.columnJobID = base.Columns["JobID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnPortType = new global::System.Data.DataColumn("PortType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortType);
                this.columnPortName = new global::System.Data.DataColumn("PortName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPortName);
                this.columnJobID = new global::System.Data.DataColumn("JobID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnID.AllowDBNull = false;
                this.columnID.Unique = true;
                this.Namespace = "http://tempuri.org/COSCOBookingDataSet.xsd";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListRow NewPortListRow() {
                return ((PortListRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PortListRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PortListRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PortListRowChanged != null)) {
                    this.PortListRowChanged(this, new PortListRowChangeEvent(((PortListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PortListRowChanging != null)) {
                    this.PortListRowChanging(this, new PortListRowChangeEvent(((PortListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PortListRowDeleted != null)) {
                    this.PortListRowDeleted(this, new PortListRowChangeEvent(((PortListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PortListRowDeleting != null)) {
                    this.PortListRowDeleting(this, new PortListRowChangeEvent(((PortListRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePortListRow(PortListRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                COSCOBookingDataSet ds = new COSCOBookingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PortListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class EDIDocumentRow : global::System.Data.DataRow {
            
            private EDIDocumentDataTable tableEDIDocument;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EDIDocumentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEDIDocument = ((EDIDocumentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableEDIDocument.IDColumn]));
                }
                set {
                    this[this.tableEDIDocument.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyCode {
                get {
                    try {
                        return ((string)(this[this.tableEDIDocument.CompanyCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“EDIDocument”中列“CompanyCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEDIDocument.CompanyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CompanyInfo {
                get {
                    try {
                        return ((string)(this[this.tableEDIDocument.CompanyInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“EDIDocument”中列“CompanyInfo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEDIDocument.CompanyInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SendDate {
                get {
                    return ((global::System.DateTime)(this[this.tableEDIDocument.SendDateColumn]));
                }
                set {
                    this[this.tableEDIDocument.SendDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentNo {
                get {
                    try {
                        return ((string)(this[this.tableEDIDocument.DocumentNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“EDIDocument”中列“DocumentNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableEDIDocument.DocumentNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyCodeNull() {
                return this.IsNull(this.tableEDIDocument.CompanyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyCodeNull() {
                this[this.tableEDIDocument.CompanyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompanyInfoNull() {
                return this.IsNull(this.tableEDIDocument.CompanyInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompanyInfoNull() {
                this[this.tableEDIDocument.CompanyInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentNoNull() {
                return this.IsNull(this.tableEDIDocument.DocumentNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentNoNull() {
                this[this.tableEDIDocument.DocumentNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow[] GetCOSCOBookingsRows() {
                if ((this.Table.ChildRelations["COSCOBookings_EDIDocument"] == null)) {
                    return new COSCOBookingsRow[0];
                }
                else {
                    return ((COSCOBookingsRow[])(base.GetChildRows(this.Table.ChildRelations["COSCOBookings_EDIDocument"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class COSCOBookingsRow : global::System.Data.DataRow {
            
            private COSCOBookingsDataTable tableCOSCOBookings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal COSCOBookingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCOSCOBookings = ((COSCOBookingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobID {
                get {
                    return ((string)(this[this.tableCOSCOBookings.JobIDColumn]));
                }
                set {
                    this[this.tableCOSCOBookings.JobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobNo {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.JobNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“JobNo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.JobNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POLCode {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.POLCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“POLCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.POLCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POLName {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.POLNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“POLName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.POLNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PODCode {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCOSCOBookings.PODCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“PODCode”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.PODCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime PODName {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCOSCOBookings.PODNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“PODName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.PODNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedShipDate {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.ExpectedShipDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“ExpectedShipDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.ExpectedShipDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EstimatedDeliveryDate {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.EstimatedDeliveryDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“EstimatedDeliveryDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.EstimatedDeliveryDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExpectedArriveDate {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.ExpectedArriveDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“ExpectedArriveDate”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.ExpectedArriveDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentType {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.PaymentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“PaymentType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.PaymentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShipperInfo {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.ShipperInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“ShipperInfo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.ShipperInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConisgneeInfo {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.ConisgneeInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“ConisgneeInfo”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.ConisgneeInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentDescription {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.AgentDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“AgentDescription”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.AgentDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“Date”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Time {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.TimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“Time”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DocumentID {
                get {
                    try {
                        return ((string)(this[this.tableCOSCOBookings.DocumentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“COSCOBookings”中列“DocumentID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCOSCOBookings.DocumentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentRow EDIDocumentRow {
                get {
                    return ((EDIDocumentRow)(this.GetParentRow(this.Table.ParentRelations["COSCOBookings_EDIDocument"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["COSCOBookings_EDIDocument"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNoNull() {
                return this.IsNull(this.tableCOSCOBookings.JobNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNoNull() {
                this[this.tableCOSCOBookings.JobNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOLCodeNull() {
                return this.IsNull(this.tableCOSCOBookings.POLCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOLCodeNull() {
                this[this.tableCOSCOBookings.POLCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOLNameNull() {
                return this.IsNull(this.tableCOSCOBookings.POLNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOLNameNull() {
                this[this.tableCOSCOBookings.POLNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPODCodeNull() {
                return this.IsNull(this.tableCOSCOBookings.PODCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPODCodeNull() {
                this[this.tableCOSCOBookings.PODCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPODNameNull() {
                return this.IsNull(this.tableCOSCOBookings.PODNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPODNameNull() {
                this[this.tableCOSCOBookings.PODNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedShipDateNull() {
                return this.IsNull(this.tableCOSCOBookings.ExpectedShipDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedShipDateNull() {
                this[this.tableCOSCOBookings.ExpectedShipDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEstimatedDeliveryDateNull() {
                return this.IsNull(this.tableCOSCOBookings.EstimatedDeliveryDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEstimatedDeliveryDateNull() {
                this[this.tableCOSCOBookings.EstimatedDeliveryDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExpectedArriveDateNull() {
                return this.IsNull(this.tableCOSCOBookings.ExpectedArriveDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExpectedArriveDateNull() {
                this[this.tableCOSCOBookings.ExpectedArriveDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentTypeNull() {
                return this.IsNull(this.tableCOSCOBookings.PaymentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentTypeNull() {
                this[this.tableCOSCOBookings.PaymentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShipperInfoNull() {
                return this.IsNull(this.tableCOSCOBookings.ShipperInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShipperInfoNull() {
                this[this.tableCOSCOBookings.ShipperInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConisgneeInfoNull() {
                return this.IsNull(this.tableCOSCOBookings.ConisgneeInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConisgneeInfoNull() {
                this[this.tableCOSCOBookings.ConisgneeInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentDescriptionNull() {
                return this.IsNull(this.tableCOSCOBookings.AgentDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentDescriptionNull() {
                this[this.tableCOSCOBookings.AgentDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDateNull() {
                return this.IsNull(this.tableCOSCOBookings.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDateNull() {
                this[this.tableCOSCOBookings.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeNull() {
                return this.IsNull(this.tableCOSCOBookings.TimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeNull() {
                this[this.tableCOSCOBookings.TimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDocumentIDNull() {
                return this.IsNull(this.tableCOSCOBookings.DocumentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDocumentIDNull() {
                this[this.tableCOSCOBookings.DocumentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListRow[] GetContainerListRows() {
                if ((this.Table.ChildRelations["ContainerList_COSCOBookings"] == null)) {
                    return new ContainerListRow[0];
                }
                else {
                    return ((ContainerListRow[])(base.GetChildRows(this.Table.ChildRelations["ContainerList_COSCOBookings"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListRow[] GetPortListRows() {
                if ((this.Table.ChildRelations["COSCOBookings_PortList"] == null)) {
                    return new PortListRow[0];
                }
                else {
                    return ((PortListRow[])(base.GetChildRows(this.Table.ChildRelations["COSCOBookings_PortList"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContainerListRow : global::System.Data.DataRow {
            
            private ContainerListDataTable tableContainerList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContainerListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContainerList = ((ContainerListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContainerCount {
                get {
                    try {
                        return ((string)(this[this.tableContainerList.ContainerCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ContainerList”中列“ContainerCount”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableContainerList.ContainerCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContainerType {
                get {
                    try {
                        return ((string)(this[this.tableContainerList.ContainerTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ContainerList”中列“ContainerType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableContainerList.ContainerTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobID {
                get {
                    try {
                        return ((string)(this[this.tableContainerList.JobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“ContainerList”中列“JobID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableContainerList.JobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tableContainerList.IDColumn]));
                }
                set {
                    this[this.tableContainerList.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow COSCOBookingsRow {
                get {
                    return ((COSCOBookingsRow)(this.GetParentRow(this.Table.ParentRelations["ContainerList_COSCOBookings"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ContainerList_COSCOBookings"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerCountNull() {
                return this.IsNull(this.tableContainerList.ContainerCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerCountNull() {
                this[this.tableContainerList.ContainerCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerTypeNull() {
                return this.IsNull(this.tableContainerList.ContainerTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerTypeNull() {
                this[this.tableContainerList.ContainerTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobIDNull() {
                return this.IsNull(this.tableContainerList.JobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobIDNull() {
                this[this.tableContainerList.JobIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PortListRow : global::System.Data.DataRow {
            
            private PortListDataTable tablePortList;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PortListRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePortList = ((PortListDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ID {
                get {
                    return ((string)(this[this.tablePortList.IDColumn]));
                }
                set {
                    this[this.tablePortList.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortType {
                get {
                    try {
                        return ((string)(this[this.tablePortList.PortTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PortList”中列“PortType”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePortList.PortTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PortName {
                get {
                    try {
                        return ((string)(this[this.tablePortList.PortNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PortList”中列“PortName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePortList.PortNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobID {
                get {
                    try {
                        return ((string)(this[this.tablePortList.JobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“PortList”中列“JobID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tablePortList.JobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow COSCOBookingsRow {
                get {
                    return ((COSCOBookingsRow)(this.GetParentRow(this.Table.ParentRelations["COSCOBookings_PortList"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["COSCOBookings_PortList"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortTypeNull() {
                return this.IsNull(this.tablePortList.PortTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortTypeNull() {
                this[this.tablePortList.PortTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPortNameNull() {
                return this.IsNull(this.tablePortList.PortNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPortNameNull() {
                this[this.tablePortList.PortNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobIDNull() {
                return this.IsNull(this.tablePortList.JobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobIDNull() {
                this[this.tablePortList.JobIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class EDIDocumentRowChangeEvent : global::System.EventArgs {
            
            private EDIDocumentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentRowChangeEvent(EDIDocumentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EDIDocumentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class COSCOBookingsRowChangeEvent : global::System.EventArgs {
            
            private COSCOBookingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRowChangeEvent(COSCOBookingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public COSCOBookingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContainerListRowChangeEvent : global::System.EventArgs {
            
            private ContainerListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListRowChangeEvent(ContainerListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContainerListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PortListRowChangeEvent : global::System.EventArgs {
            
            private PortListRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListRowChangeEvent(PortListRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PortListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591