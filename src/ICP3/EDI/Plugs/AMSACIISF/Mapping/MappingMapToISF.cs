////////////////////////////////////////////////////////////////////////
//
// MappingMapToCCF_Target.cs
//
// This file was generated by MapForce 2010.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Xml;
using Altova.Xml;
using ICP.EDI.ServiceInterface;

namespace AMSACIISF
{

    public class MappingMapToISF : Altova.TraceProvider, IMapping
    {
        private bool runDoesCloseAll = true;
        public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; } }




        #region Members
        // instances
        protected XmlNode m_AMSDataSource2Instance;
        // members
        #endregion //Members


        public void Run(String AMSDataSource2SourceFilename, string AMSACIISF2TargetFilename)
        {
            // open source streams
            WriteTrace("Loading " + AMSDataSource2SourceFilename + "...\n");
            Altova.IO.Input AMSDataSource2Source = new Altova.IO.FileInput(AMSDataSource2SourceFilename);
            // open target stream
            Altova.IO.Output AMSACIISF2Target = new Altova.IO.FileOutput(AMSACIISF2TargetFilename);

            // run
            Run(AMSDataSource2Source, AMSACIISF2Target);

            // close source streams
            AMSDataSource2Source.Stream.Close();
            // close target stream
            WriteTrace("Saving " + AMSACIISF2TargetFilename + "...\n");
            AMSACIISF2Target.Stream.Close();
        }

        public void Run(Altova.IO.Input AMSDataSource2Source, Altova.IO.Output AMSACIISF2Target)
        {
            // Open the source(s)
            XmlDocument AMSDataSource2DocSourceObject = XmlTreeOperations.LoadDocument(AMSDataSource2Source);


            m_AMSDataSource2Instance = AMSDataSource2DocSourceObject;
            AMSDataSource2Source.Close();
            // Create the target
            XmlDocument AMSACIISF2Doc = (AMSACIISF2Target.Type == Altova.IO.Output.OutputType.XmlDocument) ? AMSACIISF2Target.Document : new XmlDocument();
            // create processing instruction etc...

            // Execute mapping

            seq1_Main mapping = new seq1_Main(
new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_AMSDataSource2Instance, AMSDataSource2Source.Filename));

            Altova.Mapforce.MFDomWriter.Write(mapping, AMSACIISF2Doc);

            // Close the target
            XmlTreeOperations.SaveDocument(
                AMSACIISF2Doc,
                AMSACIISF2Target,
                "UTF-8",
                false,
                false,
                true
            );

            // Close the Source Library

            if (runDoesCloseAll)
            {
                AMSDataSource2Source.Close();
                AMSACIISF2Target.Close();
            }
        }
        class seq1_Main : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_instance_AMSDataSource;

            public seq1_Main(
                Altova.Mapforce.IMFNode var1_instance_AMSDataSource
                )
            {
                this.var1_instance_AMSDataSource = var1_instance_AMSDataSource;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq1_Main closure;
                string var2_const_;
                public Enumerator(seq1_Main closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Manifest", var2_const_), var2_const_, (new seq2_create_element_with_prefix(closure.var1_instance_AMSDataSource)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq2_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_AMSDataSource;

            public seq2_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_AMSDataSource
                )
            {
                this.var1_AMSDataSource = var1_AMSDataSource;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq2_create_element_with_prefix closure;
                string var3_const_http___tempuri_org_A;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                string var5_const_;
                public Enumerator(seq2_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var3_const_http___tempuri_org_A = ("http://tempuri.org/AMSDataSource.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("AMSDataSource", var3_const_http___tempuri_org_A), closure.var1_AMSDataSource));
                                current = Altova.Functions.Core.CreateAttributeWithPrefix(Altova.Functions.Core.CreateQName("noNamespaceSchemaLocation", "http://www.w3.org/2001/XMLSchema-instance"), "xsi", Altova.Functions.Core.Box("D:/Projects/ICP3.EDI/ICP.EDI/ICP.EDI.FileManager/AMS/AMSACIISF.xsd"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("HBL", var3_const_http___tempuri_org_A), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var5_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("BillOfLading", var5_const_), var5_const_, (new seq3_create_element_with_prefix((Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current))));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                }
            }

        }
        class seq3_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq3_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq3_create_element_with_prefix closure;
                string var40_const_Container;
                string var37_const_ISFImporterLastName;
                string var35_const_ISFImporterFirstName;
                string var33_const_ISFImporterCountryOf;
                string var31_const_ISFImporterDOB;
                string var29_const_ISFImporterID;
                string var27_const_ISFImporterIDType;
                string var24_const_BondReferenceType;
                string var21_const_BondReferenceNumber;
                string var19_const_BondActivityCode;
                string var16_const_CargoType;
                string var13_const_;
                string var10_const_AmendmentFlag;
                string var6_const_HouseBillNumber;
                string var5_const_http___tempuri_org_A;
                System.Collections.IEnumerable var38_filter_elements;
                System.Collections.IEnumerable var36_filter_elements;
                System.Collections.IEnumerable var34_filter_elements;
                System.Collections.IEnumerable var32_filter_elements;
                System.Collections.IEnumerable var30_filter_elements;
                System.Collections.IEnumerable var26_filter_elements;
                System.Collections.IEnumerable var23_filter_elements;
                System.Collections.IEnumerable var22_filter_elements;
                System.Collections.IEnumerable var18_filter_elements;
                System.Collections.IEnumerable var15_filter_elements;
                System.Collections.IEnumerable var14_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                System.Collections.IEnumerable var8_filter_elements;
                string var2_const_BookingDate;
                System.Collections.IEnumerable var4_filter_elements;
                string var3_const_;
                System.Collections.IEnumerable var9_filter_elements;
                string var7_const_;
                string var11_const_;
                System.Collections.IEnumerable var17_vmf4_inputtoresult;
                System.Collections.IEnumerable var20_vmf5_inputtoresult;
                System.Collections.IEnumerable var25_vmf6_inputtoresult;
                System.Collections.IEnumerable var28_vmf7_inputtoresult;
                IEnumerator var39_map_filter_elements;
                public Enumerator(seq3_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 6;
                                var40_const_Container = ("Container");
                                var37_const_ISFImporterLastName = ("ISFImporterLastName");
                                var35_const_ISFImporterFirstName = ("ISFImporterFirstName");
                                var33_const_ISFImporterCountryOf = ("ISFImporterCountryOfIssuance");
                                var31_const_ISFImporterDOB = ("ISFImporterDOB");
                                var29_const_ISFImporterID = ("ISFImporterID");
                                var27_const_ISFImporterIDType = ("ISFImporterIDType");
                                var24_const_BondReferenceType = ("BondReferenceType");
                                var21_const_BondReferenceNumber = ("BondReferenceNumber");
                                var19_const_BondActivityCode = ("BondActivityCode");
                                var16_const_CargoType = ("CargoType");
                                var13_const_ = ("");
                                var10_const_AmendmentFlag = ("AmendmentFlag");
                                var6_const_HouseBillNumber = ("HouseBillNumber");
                                var5_const_http___tempuri_org_A = ("http://tempuri.org/AMSDataSource.xsd");
                                var38_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var37_const_ISFImporterLastName, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var36_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var35_const_ISFImporterFirstName, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var34_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var33_const_ISFImporterCountryOf, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var32_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var31_const_ISFImporterDOB, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var30_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var29_const_ISFImporterID, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var26_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var27_const_ISFImporterIDType, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var23_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var24_const_BondReferenceType, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var22_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var21_const_BondReferenceNumber, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var18_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var19_const_BondActivityCode, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var15_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var16_const_CargoType, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var14_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CustomsEntryType", var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var10_const_AmendmentFlag, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var6_const_HouseBillNumber, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var2_const_BookingDate = ("BookingDate");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var2_const_BookingDate, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 6; goto case 6; }
                                var3_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var2_const_BookingDate, var3_const_), var3_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))));
                                pos++;
                                return true;
                            case 6:
                                state = 14;
                                if (!(Altova.Functions.Core.Exists(var8_filter_elements))) { state = 13; goto case 13; }
                                goto case 14;
                            case 13:
                                state = 27;
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 26; goto case 26; }
                                goto case 27;
                            case 14:
                                state = 13;
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Mark", var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 13; goto case 13; }
                                var7_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var6_const_HouseBillNumber, var7_const_), var7_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var8_filter_elements)), Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements)))));
                                pos++;
                                return true;
                            case 26:
                                state = 32;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("ShipperPartyInfo", var13_const_), var13_const_, (new seq4_cond_seq_(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 27:
                                state = 26;
                                var11_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var10_const_AmendmentFlag, var11_const_), var11_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements))));
                                pos++;
                                return true;
                            case 32:
                                state = 33;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("ConsigneePartyInfo", var13_const_), var13_const_, (new seq5_create_element_with_prefix(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 33:
                                state = 34;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("ShipToPartyInfo", var13_const_), var13_const_, (new seq6_cond_seq_(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 34:
                                state = 35;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("BuyerPartyInfo", var13_const_), var13_const_, (new seq7_create_element_with_prefix(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 35:
                                state = 36;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("SellerPartyInfo", var13_const_), var13_const_, (new seq8_cond_seq_(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 36:
                                state = 37;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("ManufacturerPartyInfo", var13_const_), var13_const_, (new seq9_cond_seq_(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 37:
                                state = 38;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("ConsolidatorPartyInfo", var13_const_), var13_const_, (new seq10_cond_seq_(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 38:
                                state = 39;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("ContainerStuffingLocation", var13_const_), var13_const_, (new seq11_cond_seq_(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 39:
                                state = 40;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("BookingPartyInfo", var13_const_), var13_const_, (new seq12_cond_seq_(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 40:
                                state = 42;
                                if (!(Altova.Functions.Core.Exists(var14_filter_elements))) { state = 42; goto case 42; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("TenTwoEntryType", var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var14_filter_elements))));
                                pos++;
                                return true;
                            case 42:
                                state = 50;
                                if (!(Altova.Functions.Core.Exists(var15_filter_elements))) { state = 49; goto case 49; }
                                goto case 50;
                            case 49:
                                state = 63;
                                if (!(Altova.Functions.Core.Exists(var18_filter_elements))) { state = 62; goto case 62; }
                                goto case 63;
                            case 50:
                                state = 49;
                                var17_vmf4_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf4_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var15_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var17_vmf4_inputtoresult))) { state = 49; goto case 49; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var16_const_CargoType, var13_const_), var13_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var17_vmf4_inputtoresult)));
                                pos++;
                                return true;
                            case 62:
                                state = 77;
                                if (!(Altova.Functions.Core.Exists(var22_filter_elements))) { state = 75; goto case 75; }
                                goto case 77;
                            case 63:
                                state = 62;
                                var20_vmf5_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf5_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var18_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var20_vmf5_inputtoresult))) { state = 62; goto case 62; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var19_const_BondActivityCode, var13_const_), var13_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var20_vmf5_inputtoresult)));
                                pos++;
                                return true;
                            case 75:
                                state = 83;
                                if (!(Altova.Functions.Core.Exists(var23_filter_elements))) { state = 82; goto case 82; }
                                goto case 83;
                            case 77:
                                state = 75;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var21_const_BondReferenceNumber, var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var22_filter_elements))));
                                pos++;
                                return true;
                            case 82:
                                state = 96;
                                if (!(Altova.Functions.Core.Exists(var26_filter_elements))) { state = 95; goto case 95; }
                                goto case 96;
                            case 83:
                                state = 82;
                                var25_vmf6_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf6_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var23_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var25_vmf6_inputtoresult))) { state = 82; goto case 82; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var24_const_BondReferenceType, var13_const_), var13_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var25_vmf6_inputtoresult)));
                                pos++;
                                return true;
                            case 95:
                                state = 110;
                                if (!(Altova.Functions.Core.Exists(var30_filter_elements))) { state = 108; goto case 108; }
                                goto case 110;
                            case 96:
                                state = 95;
                                var28_vmf7_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf7_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var26_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var28_vmf7_inputtoresult))) { state = 95; goto case 95; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var27_const_ISFImporterIDType, var13_const_), var13_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var28_vmf7_inputtoresult)));
                                pos++;
                                return true;
                            case 108:
                                state = 117;
                                if (!(Altova.Functions.Core.Exists(var32_filter_elements))) { state = 115; goto case 115; }
                                goto case 117;
                            case 110:
                                state = 108;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var29_const_ISFImporterID, var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var30_filter_elements))));
                                pos++;
                                return true;
                            case 115:
                                state = 124;
                                if (!(Altova.Functions.Core.Exists(var34_filter_elements))) { state = 122; goto case 122; }
                                goto case 124;
                            case 117:
                                state = 115;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var31_const_ISFImporterDOB, var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var32_filter_elements))));
                                pos++;
                                return true;
                            case 122:
                                state = 131;
                                if (!(Altova.Functions.Core.Exists(var36_filter_elements))) { state = 129; goto case 129; }
                                goto case 131;
                            case 124:
                                state = 122;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var33_const_ISFImporterCountryOf, var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var34_filter_elements))));
                                pos++;
                                return true;
                            case 129:
                                state = 138;
                                if (!(Altova.Functions.Core.Exists(var38_filter_elements))) { state = 136; goto case 136; }
                                goto case 138;
                            case 131:
                                state = 129;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var35_const_ISFImporterFirstName, var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var36_filter_elements))));
                                pos++;
                                return true;
                            case 136:
                                state = 145;
                                if (!((bool)Altova.Functions.Core.First((new seq13_if_exists(closure.var1_cur_filter_elements))))) { state = 143; goto case 143; }
                                goto case 145;
                            case 138:
                                state = 136;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var37_const_ISFImporterLastName, var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var38_filter_elements))));
                                pos++;
                                return true;
                            case 143:
                                state = 149;
                                var39_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var40_const_Container, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements)).GetEnumerator();
                                goto case 149;
                            case 145:
                                state = 143;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("PlaceOfDelivery", var13_const_), var13_const_, (new seq14_create_element_with_prefix(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 149:
                                state = 149;
                                if (!var39_map_filter_elements.MoveNext()) { state = 150; goto case 150; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var40_const_Container, var13_const_), var13_const_, (new seq15_create_element_with_prefix((Altova.Mapforce.IMFNode)(var39_map_filter_elements.Current))));
                                pos++;
                                return true;
                            case 150:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var39_map_filter_elements); var39_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var39_map_filter_elements); var39_map_filter_elements = null;
                }
            }

        }
        class seq4_cond_seq_ : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq4_cond_seq_(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq4_cond_seq_ closure;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                public Enumerator(seq4_cond_seq_ closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ShipperPartyInfo", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq5_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq5_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq5_create_element_with_prefix closure;
                string var28_const_PassportIssuanceCoun;
                string var25_const_DOB;
                string var22_const_ConsigneeLastName;
                string var19_const_ConsigneeFirstName;
                string var16_const_ConsigneeNumber;
                string var13_const_ConsigneeNumberQuali;
                string var11_const_http___tempuri_org_A;
                System.Collections.IEnumerable var30_filter_elements;
                System.Collections.IEnumerable var27_filter_elements;
                System.Collections.IEnumerable var24_filter_elements;
                System.Collections.IEnumerable var21_filter_elements;
                System.Collections.IEnumerable var18_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                System.Collections.IEnumerable var15_vmf2_inputtoresult;
                string var14_const_;
                string var17_const_;
                string var20_const_;
                string var23_const_;
                string var26_const_;
                string var29_const_;
                public Enumerator(seq5_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var28_const_PassportIssuanceCoun = ("PassportIssuanceCountry");
                                var25_const_DOB = ("DOB");
                                var22_const_ConsigneeLastName = ("ConsigneeLastName");
                                var19_const_ConsigneeFirstName = ("ConsigneeFirstName");
                                var16_const_ConsigneeNumber = ("ConsigneeNumber");
                                var13_const_ConsigneeNumberQuali = ("ConsigneeNumberQualifier");
                                var11_const_http___tempuri_org_A = ("http://tempuri.org/AMSDataSource.xsd");
                                var30_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var28_const_PassportIssuanceCoun, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var27_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var25_const_DOB, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var24_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var22_const_ConsigneeLastName, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var21_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var19_const_ConsigneeFirstName, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var18_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var16_const_ConsigneeNumber, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var13_const_ConsigneeNumberQuali, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ConsigneePartyInfo", var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 6; goto case 6; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 6:
                                state = 24;
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 23; goto case 23; }
                                goto case 24;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 6;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 6; goto case 6; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                            case 23:
                                state = 37;
                                if (!(Altova.Functions.Core.Exists(var18_filter_elements))) { state = 36; goto case 36; }
                                goto case 37;
                            case 24:
                                state = 23;
                                var15_vmf2_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf2_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var15_vmf2_inputtoresult))) { state = 23; goto case 23; }
                                var14_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var13_const_ConsigneeNumberQuali, var14_const_), var14_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var15_vmf2_inputtoresult)));
                                pos++;
                                return true;
                            case 36:
                                state = 44;
                                if (!(Altova.Functions.Core.Exists(var21_filter_elements))) { state = 43; goto case 43; }
                                goto case 44;
                            case 37:
                                state = 36;
                                var17_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var16_const_ConsigneeNumber, var17_const_), var17_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var18_filter_elements))));
                                pos++;
                                return true;
                            case 43:
                                state = 51;
                                if (!(Altova.Functions.Core.Exists(var24_filter_elements))) { state = 50; goto case 50; }
                                goto case 51;
                            case 44:
                                state = 43;
                                var20_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var19_const_ConsigneeFirstName, var20_const_), var20_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var21_filter_elements))));
                                pos++;
                                return true;
                            case 50:
                                state = 58;
                                if (!(Altova.Functions.Core.Exists(var27_filter_elements))) { state = 57; goto case 57; }
                                goto case 58;
                            case 51:
                                state = 50;
                                var23_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var22_const_ConsigneeLastName, var23_const_), var23_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var24_filter_elements))));
                                pos++;
                                return true;
                            case 57:
                                state = 65;
                                if (!(Altova.Functions.Core.Exists(var30_filter_elements))) { state = 0; return false; }
                                goto case 65;
                            case 58:
                                state = 57;
                                var26_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var25_const_DOB, var26_const_), var26_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var27_filter_elements))));
                                pos++;
                                return true;
                            case 65:
                                state = 0;
                                var29_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var28_const_PassportIssuanceCoun, var29_const_), var29_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var30_filter_elements))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq6_cond_seq_ : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq6_cond_seq_(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq6_cond_seq_ closure;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                public Enumerator(seq6_cond_seq_ closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ShipToPartyInfo", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq7_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq7_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq7_create_element_with_prefix closure;
                string var25_const_ImporterOfRecordDOB;
                string var22_const_ImporterOfRecordLast;
                string var19_const_ImporterOfRecordFirs;
                string var16_const_ImporterOfRecordNumb;
                string var13_const_ImporterOfRecordNumb;
                string var11_const_http___tempuri_org_A;
                System.Collections.IEnumerable var29_filter_elements;
                System.Collections.IEnumerable var27_filter_elements;
                System.Collections.IEnumerable var24_filter_elements;
                System.Collections.IEnumerable var21_filter_elements;
                System.Collections.IEnumerable var18_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                System.Collections.IEnumerable var15_vmf3_inputtoresult;
                string var14_const_;
                string var17_const_;
                string var20_const_;
                string var23_const_;
                string var26_const_;
                string var28_const_;
                public Enumerator(seq7_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var25_const_ImporterOfRecordDOB = ("ImporterOfRecordDOB");
                                var22_const_ImporterOfRecordLast = ("ImporterOfRecordLastName");
                                var19_const_ImporterOfRecordFirs = ("ImporterOfRecordFirstName");
                                var16_const_ImporterOfRecordNumb = ("ImporterOfRecordNumber");
                                var13_const_ImporterOfRecordNumb = ("ImporterOfRecordNumberQualifier");
                                var11_const_http___tempuri_org_A = ("http://tempuri.org/AMSDataSource.xsd");
                                var29_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ImporterOfPassportIssuanceCountry", var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var27_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var25_const_ImporterOfRecordDOB, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var24_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var22_const_ImporterOfRecordLast, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var21_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var19_const_ImporterOfRecordFirs, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var18_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var16_const_ImporterOfRecordNumb, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var13_const_ImporterOfRecordNumb, var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("BuyerPartyInfo", var11_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 6; goto case 6; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 6:
                                state = 24;
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 23; goto case 23; }
                                goto case 24;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 6;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 6; goto case 6; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                            case 23:
                                state = 37;
                                if (!(Altova.Functions.Core.Exists(var18_filter_elements))) { state = 36; goto case 36; }
                                goto case 37;
                            case 24:
                                state = 23;
                                var15_vmf3_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf3_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var15_vmf3_inputtoresult))) { state = 23; goto case 23; }
                                var14_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var13_const_ImporterOfRecordNumb, var14_const_), var14_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var15_vmf3_inputtoresult)));
                                pos++;
                                return true;
                            case 36:
                                state = 44;
                                if (!(Altova.Functions.Core.Exists(var21_filter_elements))) { state = 43; goto case 43; }
                                goto case 44;
                            case 37:
                                state = 36;
                                var17_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var16_const_ImporterOfRecordNumb, var17_const_), var17_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var18_filter_elements))));
                                pos++;
                                return true;
                            case 43:
                                state = 51;
                                if (!(Altova.Functions.Core.Exists(var24_filter_elements))) { state = 50; goto case 50; }
                                goto case 51;
                            case 44:
                                state = 43;
                                var20_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var19_const_ImporterOfRecordFirs, var20_const_), var20_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var21_filter_elements))));
                                pos++;
                                return true;
                            case 50:
                                state = 58;
                                if (!(Altova.Functions.Core.Exists(var27_filter_elements))) { state = 57; goto case 57; }
                                goto case 58;
                            case 51:
                                state = 50;
                                var23_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var22_const_ImporterOfRecordLast, var23_const_), var23_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var24_filter_elements))));
                                pos++;
                                return true;
                            case 57:
                                state = 65;
                                if (!(Altova.Functions.Core.Exists(var29_filter_elements))) { state = 0; return false; }
                                goto case 65;
                            case 58:
                                state = 57;
                                var26_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var25_const_ImporterOfRecordDOB, var26_const_), var26_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var27_filter_elements))));
                                pos++;
                                return true;
                            case 65:
                                state = 0;
                                var28_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("PassportIssuanceCountry", var28_const_), var28_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var29_filter_elements))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq8_cond_seq_ : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq8_cond_seq_(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq8_cond_seq_ closure;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                public Enumerator(seq8_cond_seq_ closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("SellerPartyInfo", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq9_cond_seq_ : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq9_cond_seq_(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq9_cond_seq_ closure;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                public Enumerator(seq9_cond_seq_ closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ManufacturerPartyInfo", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq10_cond_seq_ : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq10_cond_seq_(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq10_cond_seq_ closure;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                public Enumerator(seq10_cond_seq_ closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ConsolidatorPartyInfo", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq11_cond_seq_ : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq11_cond_seq_(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq11_cond_seq_ closure;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                public Enumerator(seq11_cond_seq_ closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ContainerStuffingLocation", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq12_cond_seq_ : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq12_cond_seq_(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq12_cond_seq_ closure;
                System.Collections.IEnumerable var3_filter_elements;
                decimal var9_const_35;
                string var7_cast;
                System.Collections.IEnumerable var10_vmf0_inputtoresult;
                double var6_;
                double var5_;
                string var4_substring_after;
                string var8_concat;
                string var2_const_;
                public Enumerator(seq12_cond_seq_ closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 9;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("BookingPartyInfo", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                var9_const_35 = (35m);
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements)));
                                var10_vmf0_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf0_inputtoresult.Create(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Country>"), "<Country>")));
                                var6_ = (Altova.CoreTypes.DecimalToDouble(40m));
                                var5_ = (Altova.CoreTypes.DecimalToDouble(0m));
                                var4_substring_after = (Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Name>"), "<Name>"));
                                var8_concat = (Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(var4_substring_after, Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Address>"), "<Address>")));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Name", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var4_substring_after, var5_, var6_)));
                                pos++;
                                return true;
                            case 9:
                                state = 10;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress1", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(var8_concat, Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(var9_const_35))))));
                                pos++;
                                return true;
                            case 10:
                                state = 11;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("StreetAddress2", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Substring(var8_concat, Altova.CoreTypes.DecimalToDouble(36m), Altova.CoreTypes.DecimalToDouble(var9_const_35))));
                                pos++;
                                return true;
                            case 11:
                                state = 12;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("CityStateZip", var2_const_), var2_const_, Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</City>"), "<City>"), " "), Altova.Functions.Core.SubstringAfter(Altova.Functions.Core.SubstringBefore(var7_cast, "</Zip>"), "<Zip>"))));
                                pos++;
                                return true;
                            case 12:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var10_vmf0_inputtoresult))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Country", var2_const_), var2_const_, Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_vmf0_inputtoresult)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq13_if_exists : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq13_if_exists(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq13_if_exists closure;
                System.Collections.IEnumerable var2_filter_elements;
                public Enumerator(seq13_if_exists closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CustomsEntryType", "http://tempuri.org/AMSDataSource.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var2_filter_elements))) { state = 11; goto case 11; }
                                current = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var2_filter_elements))) == ("64");
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.ParseBoolean("false");
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq14_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var2_cur_filter_elements;

            public seq14_create_element_with_prefix(
                Altova.Mapforce.IMFNode var2_cur_filter_elements
                )
            {
                this.var2_cur_filter_elements = var2_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq14_create_element_with_prefix closure;
                System.Collections.IEnumerable var3_filter_elements;
                string var1_const_;
                public Enumerator(seq14_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("PlaceOfDeliveryPortCode", "http://tempuri.org/AMSDataSource.xsd"), closure.var2_cur_filter_elements));
                                var1_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("PortCode", var1_const_), var1_const_, Altova.Functions.Core.Box("UN"));
                                pos++;
                                return true;
                            case 5:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 0; return false; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Qualifier", var1_const_), var1_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq15_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq15_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq15_create_element_with_prefix closure;
                string var9_const_;
                string var6_const_Seal;
                string var5_const_http___tempuri_org_A;
                System.Collections.IEnumerable var8_filter_elements;
                string var2_const_ContainerNumber;
                System.Collections.IEnumerable var4_filter_elements;
                string var3_const_;
                string var7_const_;
                public Enumerator(seq15_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 6;
                                var9_const_ = ("");
                                var6_const_Seal = ("Seal");
                                var5_const_http___tempuri_org_A = ("http://tempuri.org/AMSDataSource.xsd");
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var6_const_Seal, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var2_const_ContainerNumber = ("ContainerNumber");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var2_const_ContainerNumber, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 6; goto case 6; }
                                var3_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var2_const_ContainerNumber, var3_const_), var3_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))));
                                pos++;
                                return true;
                            case 6:
                                state = 14;
                                if (!(Altova.Functions.Core.Exists(var8_filter_elements))) { state = 13; goto case 13; }
                                goto case 14;
                            case 13:
                                state = 0;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("ContainerContent", var9_const_), var9_const_, (new seq16_create_element_with_prefix(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                            case 14:
                                state = 13;
                                var7_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var6_const_Seal, var7_const_), var7_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var8_filter_elements))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq16_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq16_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq16_create_element_with_prefix closure;
                string var16_const_ContainerDetails;
                string var12_const_FreeFormDescription;
                string var9_const_UnitOfMeasure;
                string var6_const_Quantity;
                string var5_const_http___tempuri_org_A;
                System.Collections.IEnumerable var14_filter_elements;
                System.Collections.IEnumerable var11_filter_elements;
                System.Collections.IEnumerable var8_filter_elements;
                string var2_const_Kilos;
                System.Collections.IEnumerable var4_filter_elements;
                string var3_const_;
                string var7_const_;
                string var10_const_;
                string var13_const_;
                IEnumerator var15_map_filter_elements;
                string var17_const_;
                public Enumerator(seq16_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 6;
                                var16_const_ContainerDetails = ("ContainerDetails");
                                var12_const_FreeFormDescription = ("FreeFormDescription");
                                var9_const_UnitOfMeasure = ("UnitOfMeasure");
                                var6_const_Quantity = ("Quantity");
                                var5_const_http___tempuri_org_A = ("http://tempuri.org/AMSDataSource.xsd");
                                var14_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var12_const_FreeFormDescription, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var11_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var9_const_UnitOfMeasure, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var6_const_Quantity, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var2_const_Kilos = ("Kilos");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var2_const_Kilos, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 6; goto case 6; }
                                var3_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var2_const_Kilos, var3_const_), var3_const_, Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.Functions.Core.Round(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements)))))));
                                pos++;
                                return true;
                            case 6:
                                state = 14;
                                if (!(Altova.Functions.Core.Exists(var8_filter_elements))) { state = 13; goto case 13; }
                                goto case 14;
                            case 13:
                                state = 21;
                                if (!(Altova.Functions.Core.Exists(var11_filter_elements))) { state = 20; goto case 20; }
                                goto case 21;
                            case 14:
                                state = 13;
                                var7_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var6_const_Quantity, var7_const_), var7_const_, Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var8_filter_elements)))))))))));
                                pos++;
                                return true;
                            case 20:
                                state = 28;
                                if (!(Altova.Functions.Core.Exists(var14_filter_elements))) { state = 27; goto case 27; }
                                goto case 28;
                            case 21:
                                state = 20;
                                var10_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var9_const_UnitOfMeasure, var10_const_), var10_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var11_filter_elements))));
                                pos++;
                                return true;
                            case 27:
                                state = 33;
                                var15_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var16_const_ContainerDetails, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements)).GetEnumerator();
                                goto case 33;
                            case 28:
                                state = 27;
                                var13_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var12_const_FreeFormDescription, var13_const_), var13_const_, Altova.Functions.Core.Box(Altova.Functions.Lang.Left(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var14_filter_elements)), Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(180m))))));
                                pos++;
                                return true;
                            case 33:
                                state = 33;
                                if (!var15_map_filter_elements.MoveNext()) { state = 34; goto case 34; }
                                var17_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var16_const_ContainerDetails, var17_const_), var17_const_, (new seq17_create_element_with_prefix((Altova.Mapforce.IMFNode)(var15_map_filter_elements.Current))));
                                pos++;
                                return true;
                            case 34:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var15_map_filter_elements); var15_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var15_map_filter_elements); var15_map_filter_elements = null;
                }
            }

        }
        class seq17_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq17_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq17_create_element_with_prefix closure;
                string var6_const_CountryOfOrigin;
                string var5_const_http___tempuri_org_A;
                System.Collections.IEnumerable var8_filter_elements;
                string var2_const_HarmonizedTariffCode;
                System.Collections.IEnumerable var4_filter_elements;
                string var3_const_;
                string var7_const_;
                public Enumerator(seq17_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 6;
                                var6_const_CountryOfOrigin = ("CountryOfOrigin");
                                var5_const_http___tempuri_org_A = ("http://tempuri.org/AMSDataSource.xsd");
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var6_const_CountryOfOrigin, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                var2_const_HarmonizedTariffCode = ("HarmonizedTariffCode");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName(var2_const_HarmonizedTariffCode, var5_const_http___tempuri_org_A), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 6; goto case 6; }
                                var3_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var2_const_HarmonizedTariffCode, var3_const_), var3_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))));
                                pos++;
                                return true;
                            case 6:
                                state = 14;
                                if (!(Altova.Functions.Core.Exists(var8_filter_elements))) { state = 0; return false; }
                                goto case 14;
                            case 14:
                                state = 0;
                                var7_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName(var6_const_CountryOfOrigin, var7_const_), var7_const_, Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var8_filter_elements))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
    }
}
