////////////////////////////////////////////////////////////////////////
//
// MappingMapTocs
//
// This file was generated by MapForce 2010.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Data;
using System.Xml;
using Altova.Types;
using Altova.Xml;
using Altova.Functions;
using Altova.TextParser;

using ICP.EDI.ServiceInterface;


namespace FYCW.SI

{
	
	public class MappingMapToTextfile : Altova.TraceProvider ,IMapping
	{
		static IEnumerable ThrowUserException(string content)
		{
			throw new Altova.UserException(content);
		}

		private bool runDoesCloseAll = true;

		#region Members
		// documents
		
		// instances
		protected XmlNode	m_IFCSUM_FYCW2Instance;
		// members
		#endregion //Members


		public void Run(String IFCSUM_FYCW2SourceFilename, string TextfileTargetFilename)
		{
		// open source streams
		WriteTrace("Loading " + IFCSUM_FYCW2SourceFilename + "...\n");
		Altova.IO.Input IFCSUM_FYCW2Source = new Altova.IO.FileInput(IFCSUM_FYCW2SourceFilename);
		// open target stream
		Altova.IO.Output TextfileTarget = new Altova.IO.FileOutput(TextfileTargetFilename);

		// run
		Run(IFCSUM_FYCW2Source, TextfileTarget);

		// close source streams
		IFCSUM_FYCW2Source.Stream.Close();
		// close target stream
		WriteTrace("Saving " + TextfileTargetFilename + "...\n");
		TextfileTarget.Stream.Close();
	}

		public void Run(Altova.IO.Input IFCSUM_FYCW2Source, Altova.IO.Output TextfileTarget)
		{
			// Open the source(s)
			XmlDocument IFCSUM_FYCW2DocSourceObject = XmlTreeOperations.LoadDocument(IFCSUM_FYCW2Source);


			m_IFCSUM_FYCW2Instance = IFCSUM_FYCW2DocSourceObject;
			// Create the target
			TextfileDocument TextfileTargetDoc = new TextfileDocument(Textfile_TypeInfo.binder.Types[Textfile_TypeInfo._altova_ti_altova_RowsType]);
			Altova.TextParser.TableLike.Table TextfileTargetObject = TextfileTargetDoc;
			TextfileTargetDoc.Format.AssumeFirstRowAsHeaders = false;
			TextfileTargetDoc.Format.FieldDelimiter = ',';
			TextfileTargetDoc.Format.RemoveEmpty = true;
			TextfileTargetDoc.Format.QuoteCharacter = '\0';

			// Execute mapping

			seq1_Main mapping = new seq1_Main( 
new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_IFCSUM_FYCW2Instance, IFCSUM_FYCW2Source.Filename));

			Altova.Mapforce.MFTextWriter.Write(mapping, TextfileTargetObject);

			// Close the target

            TextfileTargetDoc.SetEncoding("ASCII", false, false);
			TextfileTargetDoc.Save( TextfileTarget );
			// Close the Source Library

			if (runDoesCloseAll)
			{
			IFCSUM_FYCW2Source.Close();
			TextfileTarget.Close();
			}
		}
	class seq1_Main : IEnumerable
	{
		Altova.Mapforce.IMFNode var1_instance_IFCSUM_FYCW;
	
		public seq1_Main(
			Altova.Mapforce.IMFNode var1_instance_IFCSUM_FYCW
			)
		{
			this.var1_instance_IFCSUM_FYCW = var1_instance_IFCSUM_FYCW;
		}

		public IEnumerator GetEnumerator() { return new Enumerator(this); }
		
		class Enumerator : Altova.Mapforce.IMFEnumerator
		{
			int state = 1;
			object current;
			int pos = 0;
			seq1_Main closure;
			System.Collections.IEnumerable var3_select_IFCSUM_FYCW;
			IEnumerator var2_map_select_EDI;
			public Enumerator(seq1_Main closure) 
			{
				this.closure = closure;
			
			}
			
			public void Reset() { state = 0; pos = 0;}
			public int Position { get { return pos; } }
			public object Current { get { return current; } }
			
			public bool MoveNext()
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:
						state = 9;				
						var3_select_IFCSUM_FYCW = new Altova.Functions.Core.SequenceCache((closure.var1_instance_IFCSUM_FYCW).Select(Altova.Mapforce.MFQueryKind.ChildrenByQName, new System.Xml.XmlQualifiedName("IFCSUM_FYCW", "http://tempuri.org/IFCSUM_FYCW.xsd")));
						if (!((Altova.Functions.Core.Exists(var3_select_IFCSUM_FYCW)))) { state = 0; return false; }
						var2_map_select_EDI = (((Altova.Mapforce.IMFNode)(Altova.Functions.Core.First(var3_select_IFCSUM_FYCW))).Select(Altova.Mapforce.MFQueryKind.ChildrenByQName, new System.Xml.XmlQualifiedName("EDI", "http://tempuri.org/IFCSUM_FYCW.xsd"))).GetEnumerator();
						goto case 9;			
					case 9:
						state = 9;				
						if (!var2_map_select_EDI.MoveNext()) { state = 10; goto case 10; }
						current = new Altova.Mapforce.MFElement("Rows", "", null, (new seq2_cond_result_exists((Altova.Mapforce.IMFNode)(var2_map_select_EDI.Current))));
						pos++;
						return true;
					case 10:
						state = 0;				
						Altova.Mapforce.MFEnumerator.Dispose(var2_map_select_EDI); var2_map_select_EDI = null;
						return false;
					}
				}
				return false;
			}
			
			public void Dispose() 
			{
				Altova.Mapforce.MFEnumerator.Dispose(var2_map_select_EDI);
			}
		}
				
	}
	class seq2_cond_result_exists : IEnumerable
	{
		Altova.Mapforce.IMFNode var1_bv;
	
		public seq2_cond_result_exists(
			Altova.Mapforce.IMFNode var1_bv
			)
		{
			this.var1_bv = var1_bv;
		}

		public IEnumerator GetEnumerator() { return new Enumerator(this); }
		
		class Enumerator : Altova.Mapforce.IMFEnumerator
		{
			int state = 1;
			object current;
			int pos = 0;
			seq2_cond_result_exists closure;
			System.Collections.IEnumerable var2_select_EDIDATA;
			public Enumerator(seq2_cond_result_exists closure) 
			{
				this.closure = closure;
			
			}
			
			public void Reset() { state = 0; pos = 0;}
			public int Position { get { return pos; } }
			public object Current { get { return current; } }
			
			public bool MoveNext()
			{
				while (state != 0)
				{
					switch (state) 
					{
					case 1:
						state = 0;				
						var2_select_EDIDATA = new Altova.Functions.Core.SequenceCache((closure.var1_bv).Select(Altova.Mapforce.MFQueryKind.ChildrenByQName, new System.Xml.XmlQualifiedName("EDIDATA", "http://tempuri.org/IFCSUM_FYCW.xsd")));
						if (!((Altova.Functions.Core.Exists(var2_select_EDIDATA)))) { state = 0; return false; }
						current = new Altova.Mapforce.MFElement("DATA", "", null, (Altova.Functions.Core.Box((Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(Altova.Functions.Core.First(var2_select_EDIDATA)))))));
						pos++;
						return true;
					}
				}
				return false;
			}
			
			public void Dispose() 
			{
			}
		}
				
	}

	public bool CloseObjectsAfterRun
	{
		get
		{
			return runDoesCloseAll;
		}
		set
		{
			runDoesCloseAll = value;
		}
	}
  } 
}
