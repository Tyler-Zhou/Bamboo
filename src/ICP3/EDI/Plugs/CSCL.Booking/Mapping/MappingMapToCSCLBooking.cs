////////////////////////////////////////////////////////////////////////
//
// MappingMapToCSCLBooking.cs
//
// This file was generated by MapForce 2011r2.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System;
using System.Collections;
using System.Xml;
using Altova.Xml;
using ICP.EDI.ServiceInterface;

// application.libraries

namespace CSCL.Booking

{
	
	public class MappingMapToCSCLBooking : Altova.TraceProvider,IMapping
	{
        private bool runDoesCloseAll = true;
        public bool CloseObjectsAfterRun { get { return runDoesCloseAll; } set { runDoesCloseAll = value; } }




        #region Members
        // instances
        protected XmlNode m_CSCLBooking22Instance;
        // members
        #endregion //Members


        public void Run(String CSCLBooking22SourceFilename, string CSCLBookingTargetFilename)
        {
            // open source streams
            WriteTrace("Loading " + CSCLBooking22SourceFilename + "...\n");
            Altova.IO.Input CSCLBooking22Source = new Altova.IO.FileInput(CSCLBooking22SourceFilename);
            // open target stream
            Altova.IO.Output CSCLBookingTarget = new Altova.IO.FileOutput(CSCLBookingTargetFilename);

            // run
            Run(CSCLBooking22Source, CSCLBookingTarget);

            // close source streams
            CSCLBooking22Source.Stream.Close();
            // close target stream
            WriteTrace("Saving " + CSCLBookingTargetFilename + "...\n");
            CSCLBookingTarget.Stream.Close();
        }

        public void Run(Altova.IO.Input CSCLBooking22Source, Altova.IO.Output CSCLBookingTarget)
        {
            // Open the source(s)
            XmlDocument CSCLBooking22DocSourceObject = XmlTreeOperations.LoadDocument(CSCLBooking22Source);


            m_CSCLBooking22Instance = CSCLBooking22DocSourceObject;
            CSCLBooking22Source.Close();
            // Create the target
            CSCLBooking.CSCLBookingDocument CSCLBookingTargetDoc = new CSCLBooking.CSCLBookingDocument();
            Altova.TextParser.ITextNode CSCLBookingTargetObject = CSCLBookingTargetDoc.Generator;

            // Execute mapping

            seq1_Main mapping = new seq1_Main(
new Altova.Mapforce.DOMDocumentNodeAsMFNodeAdapter(m_CSCLBooking22Instance, CSCLBooking22Source.Filename));

            Altova.Mapforce.MFTextWriter.Write(mapping, CSCLBookingTargetObject);

            // Close the target

            CSCLBookingTargetDoc.SetEncoding("windows-1252", false, false);
            CSCLBookingTargetDoc.Save(CSCLBookingTarget);

            // Close the Source Library

            if (runDoesCloseAll)
            {
                CSCLBooking22Source.Close();
                CSCLBookingTarget.Close();
            }
        }
        class seq1_Main : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_instance_CSCLBooking2;

            public seq1_Main(
                Altova.Mapforce.IMFNode var1_instance_CSCLBooking2
                )
            {
                this.var1_instance_CSCLBooking2 = var1_instance_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq1_Main closure;
                string var2_const_;
                public Enumerator(seq1_Main closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("Root", var2_const_), Altova.Functions.Core.Box(Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("Sections", var2_const_), (new seq2_create_element(closure.var1_instance_CSCLBooking2)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq2_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var2_CSCLBooking2;

            public seq2_create_element(
                Altova.Mapforce.IMFNode var2_CSCLBooking2
                )
            {
                this.var2_CSCLBooking2 = var2_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq2_create_element closure;
                string var1_const_;
                string var4_const_http___tempuri_org_C;
                System.Collections.IEnumerable var5_filter_elements;
                bool var7_exists;
                IEnumerator var3_map_filter_elements;
                IEnumerator var6_map_filter_elements;
                IEnumerator var8_map_filter_elements;
                IEnumerator var9_map_filter_elements;
                System.Collections.IEnumerable var10_filter_elements;
                public Enumerator(seq2_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var1_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("HEAD RECORD", var1_const_), (new seq3_create_element()));
                                pos++;
                                return true;
                            case 5:
                                state = 8;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("VESSEL", var1_const_), (new seq8_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 8:
                                state = 11;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("PRE.VESSEL", var1_const_), (new seq11_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 11:
                                state = 14;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("PORTS", var1_const_), (new seq12_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 14:
                                state = 16;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("BOOKING NO", var1_const_), (new seq13_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 16:
                                state = 18;
                                var4_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var5_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var4_const_http___tempuri_org_C), closure.var2_CSCLBooking2));
                                var7_exists = (Altova.Functions.Core.Exists(var5_filter_elements));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("SHIPPER", var1_const_), (new seq14_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 18:
                                state = 19;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CONSIGNE", var1_const_), (new seq15_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 19:
                                state = 20;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("NOTIFY PARTY", var1_const_), (new seq16_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 20:
                                state = 25;
                                if (!(var7_exists)) { state = 22; goto case 22; }
                                var3_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements))).GetEnumerator();
                                goto case 25;
                            case 22:
                                state = 36;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CARGO OF BOOKING", var1_const_), (new seq18_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 25:
                                state = 29;
                                if (!var3_map_filter_elements.MoveNext()) { state = 26; goto case 26; }
                                var6_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Container", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var3_map_filter_elements.Current))).GetEnumerator();
                                goto case 29;
                            case 26:
                                state = 22;
                                Altova.Mapforce.MFEnumerator.Dispose(var3_map_filter_elements); var3_map_filter_elements = null;
                                goto case 22;
                            case 29:
                                state = 29;
                                if (!var6_map_filter_elements.MoveNext()) { state = 30; goto case 30; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CONTAINER OF BOOKING", var1_const_), (new seq17_create_element((Altova.Mapforce.IMFNode)(var6_map_filter_elements.Current))));
                                pos++;
                                return true;
                            case 30:
                                state = 25;
                                Altova.Mapforce.MFEnumerator.Dispose(var6_map_filter_elements); var6_map_filter_elements = null;
                                goto case 25;
                            case 36:
                                state = 41;
                                if (!(var7_exists)) { state = 38; goto case 38; }
                                var8_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements))).GetEnumerator();
                                goto case 41;
                            case 38:
                                state = 60;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("MARKS&NOS.", var1_const_), (new seq21_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 41:
                                state = 41;
                                if (!var8_map_filter_elements.MoveNext()) { state = 42; goto case 42; }
                                if (!(Altova.Functions.Core.Exists(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("TemperatureSetting", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var8_map_filter_elements.Current))))) { state = 41; goto case 41; }
                                if (!((bool)Altova.Functions.Core.First((new seq19_if_exists((Altova.Mapforce.IMFNode)(var8_map_filter_elements.Current)))))) { state = 41; goto case 41; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("DANGEROUS\uFF0CREEFER&OOG", var1_const_), (new seq20_create_element((Altova.Mapforce.IMFNode)(var8_map_filter_elements.Current))));
                                pos++;
                                return true;
                            case 42:
                                state = 38;
                                Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                                goto case 38;
                            case 60:
                                state = 61;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CARGO DESCRIPTION", var1_const_), (new seq22_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 61:
                                state = 62;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("FREIGHT CLAUSE", var1_const_), (new seq23_create_element()));
                                pos++;
                                return true;
                            case 62:
                                state = 63;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("REMARKS", var1_const_), (new seq24_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 63:
                                state = 64;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("B/L", var1_const_), (new seq25_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 64:
                                state = 69;
                                if (!(var7_exists)) { state = 66; goto case 66; }
                                var9_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements))).GetEnumerator();
                                goto case 69;
                            case 66:
                                state = 0;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("TRAILER RECORD", var1_const_), (new seq27_create_element(closure.var2_CSCLBooking2)));
                                pos++;
                                return true;
                            case 69:
                                state = 69;
                                if (!var9_map_filter_elements.MoveNext()) { state = 70; goto case 70; }
                                var10_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("BookingRemarks", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var9_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var10_filter_elements))) { state = 69; goto case 69; }
                                if (!(Altova.Functions.Lang.Empty(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var10_filter_elements))))) { state = 82; goto case 82; }
                                goto case 69;
                            case 70:
                                state = 66;
                                Altova.Mapforce.MFEnumerator.Dispose(var9_map_filter_elements); var9_map_filter_elements = null;
                                goto case 66;
                            case 82:
                                state = 69;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("BookingDes", var1_const_), (new seq26_create_element((Altova.Mapforce.IMFNode)(var9_map_filter_elements.Current))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var6_map_filter_elements); var6_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var3_map_filter_elements); var3_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var9_map_filter_elements); var9_map_filter_elements = null;
                }
            }

        }
        class seq3_create_element : IEnumerable
        {

            public seq3_create_element(
                )
            {
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq3_create_element closure;
                string var1_const_;
                public Enumerator(seq3_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var1_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var1_const_), Altova.Functions.Core.Box("00"));
                                pos++;
                                return true;
                            case 5:
                                state = 6;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("SAGE TYPE", var1_const_), Altova.Functions.Core.Box("IFTMBF"));
                                pos++;
                                return true;
                            case 6:
                                state = 7;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("FILE DESCRIPTION", var1_const_), Altova.Functions.Core.Box("BOOKING"));
                                pos++;
                                return true;
                            case 7:
                                state = 8;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("FILE FUNCTION", var1_const_), Altova.Functions.Core.Box("9"));
                                pos++;
                                return true;
                            case 8:
                                state = 9;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECEIVER CODE", var1_const_), Altova.Functions.Core.Box("CSCL"));
                                pos++;
                                return true;
                            case 9:
                                state = 0;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("FILE CREATE TIME", var1_const_), Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Lang.Right(Altova.Functions.Core.ToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.Functions.Lang.YearFromDatetime(Altova.Functions.Lang.Now())))), Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(2m)))), (string)Altova.Functions.Core.First((new seq4_if_less()))), (string)Altova.Functions.Core.First((new seq5_if_less()))), (string)Altova.Functions.Core.First((new seq6_if_less()))), (string)Altova.Functions.Core.First((new seq7_if_less())))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq4_if_less : IEnumerable
        {

            public seq4_if_less(
                )
            {
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq4_if_less closure;
                int var2_month_from_datetime;
                decimal var1_cast;
                public Enumerator(seq4_if_less closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_month_from_datetime = (Altova.Functions.Lang.MonthFromDatetime(Altova.Functions.Lang.Now()));
                                var1_cast = (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(var2_month_from_datetime)));
                                if (!((var1_cast) < (10m))) { state = 11; goto case 11; }
                                current = Altova.Functions.Core.Concat("0", Altova.Functions.Core.ToString(var1_cast));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong((int)Altova.Functions.Core.First(Altova.Functions.Core.Box(var2_month_from_datetime)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq5_if_less : IEnumerable
        {

            public seq5_if_less(
                )
            {
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq5_if_less closure;
                int var2_day_from_datetime;
                decimal var1_cast;
                public Enumerator(seq5_if_less closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_day_from_datetime = (Altova.Functions.Lang.DayFromDatetime(Altova.Functions.Lang.Now()));
                                var1_cast = (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(var2_day_from_datetime)));
                                if (!((var1_cast) < (10m))) { state = 11; goto case 11; }
                                current = Altova.Functions.Core.Concat("0", Altova.Functions.Core.ToString(var1_cast));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong((int)Altova.Functions.Core.First(Altova.Functions.Core.Box(var2_day_from_datetime)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq6_if_less : IEnumerable
        {

            public seq6_if_less(
                )
            {
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq6_if_less closure;
                int var2_hour_from_datetime;
                decimal var1_cast;
                public Enumerator(seq6_if_less closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_hour_from_datetime = (Altova.Functions.Lang.HourFromDatetime(Altova.Functions.Lang.Now()));
                                var1_cast = (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(var2_hour_from_datetime)));
                                if (!((var1_cast) < (10m))) { state = 11; goto case 11; }
                                current = Altova.Functions.Core.Concat("0", Altova.Functions.Core.ToString(var1_cast));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong((int)Altova.Functions.Core.First(Altova.Functions.Core.Box(var2_hour_from_datetime)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq7_if_less : IEnumerable
        {

            public seq7_if_less(
                )
            {
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq7_if_less closure;
                int var2_minute_from_datetime;
                decimal var1_cast;
                public Enumerator(seq7_if_less closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_minute_from_datetime = (Altova.Functions.Lang.MinuteFromDatetime(Altova.Functions.Lang.Now()));
                                var1_cast = (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(var2_minute_from_datetime)));
                                if (!((var1_cast) < (10m))) { state = 11; goto case 11; }
                                current = Altova.Functions.Core.Concat("0", Altova.Functions.Core.ToString(var1_cast));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong((int)Altova.Functions.Core.First(Altova.Functions.Core.Box(var2_minute_from_datetime)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq8_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq8_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq8_create_element closure;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                bool var12_exists;
                System.Collections.IEnumerable var8_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                IEnumerator var7_map_filter_elements;
                System.Collections.IEnumerable var9_filter_elements;
                IEnumerator var10_map_filter_elements;
                System.Collections.IEnumerable var11_filter_elements;
                IEnumerator var13_map_filter_elements;
                System.Collections.IEnumerable var14_filter_elements;
                Altova.Types.DateTime var15_cast;
                public Enumerator(seq8_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                var12_exists = (Altova.Functions.Core.Exists(var4_filter_elements));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), Altova.Functions.Core.Box("10"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(var12_exists)) { state = 7; goto case 7; }
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements)));
                                var2_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 10;
                            case 7:
                                state = 45;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("SHIPPING LINE CODE", var5_const_), Altova.Functions.Core.Box("CSCL"));
                                pos++;
                                return true;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("VesselCode", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("VESSEL CODE", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 21;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                var7_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 21;
                            case 21:
                                state = 21;
                                if (!var7_map_filter_elements.MoveNext()) { state = 22; goto case 22; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Vessel", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var7_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 21; goto case 21; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("VESSEL", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements))));
                                pos++;
                                return true;
                            case 22:
                                state = 32;
                                Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                                var10_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 32;
                            case 32:
                                state = 32;
                                if (!var10_map_filter_elements.MoveNext()) { state = 33; goto case 33; }
                                var11_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Voyage", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var10_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var11_filter_elements))) { state = 32; goto case 32; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("VOYAGE", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var11_filter_elements))));
                                pos++;
                                return true;
                            case 33:
                                state = 7;
                                Altova.Mapforce.MFEnumerator.Dispose(var10_map_filter_elements); var10_map_filter_elements = null;
                                goto case 7;
                            case 45:
                                state = 50;
                                if (!(var12_exists)) { state = 0; return false; }
                                var13_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 50;
                            case 50:
                                state = 50;
                                if (!var13_map_filter_elements.MoveNext()) { state = 51; goto case 51; }
                                var14_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ETD", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var13_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var14_filter_elements))) { state = 50; goto case 50; }
                                var15_cast = (Altova.CoreTypes.ParseDateTime(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var14_filter_elements))));
                                if (!(Altova.Functions.Lang.Empty(Altova.CoreTypes.DateTimeToString(var15_cast)))) { state = 65; goto case 65; }
                                Altova.Functions.Core.ThrowUserException("ETD\u4E0D\u80FD\u4E3A\u7A7A\uFF01");
                                goto case 50;
                            case 51:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var13_map_filter_elements); var13_map_filter_elements = null;
                                return false;
                            case 65:
                                state = 50;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("REQUESTED SHIPMENT DATE", var5_const_), Altova.Functions.Core.Box(Altova.Functions.Core.Concat(Altova.Functions.Core.Concat(Altova.Functions.Lang.Right(Altova.Functions.Core.ToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.Functions.Lang.YearFromDatetime(var15_cast)))), Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(2m)))), (string)Altova.Functions.Core.First((new seq9_if_less((Altova.Mapforce.IMFNode)(var13_map_filter_elements.Current))))), (string)Altova.Functions.Core.First((new seq10_if_less((Altova.Mapforce.IMFNode)(var13_map_filter_elements.Current)))))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var10_map_filter_elements); var10_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var13_map_filter_elements); var13_map_filter_elements = null;
                }
            }

        }
        class seq9_if_less : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq9_if_less(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq9_if_less closure;
                int var3_month_from_datetime;
                decimal var2_cast;
                public Enumerator(seq9_if_less closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var3_month_from_datetime = (Altova.Functions.Lang.MonthFromDatetime(Altova.CoreTypes.ParseDateTime(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ETD", "http://tempuri.org/CSCLBooking.xsd"), closure.var1_cur_filter_elements))))));
                                var2_cast = (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(var3_month_from_datetime)));
                                if (!((var2_cast) < (10m))) { state = 11; goto case 11; }
                                current = Altova.Functions.Core.Concat("0", Altova.Functions.Core.ToString(var2_cast));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong((int)Altova.Functions.Core.First(Altova.Functions.Core.Box(var3_month_from_datetime)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq10_if_less : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq10_if_less(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq10_if_less closure;
                int var3_day_from_datetime;
                decimal var2_cast;
                public Enumerator(seq10_if_less closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var3_day_from_datetime = (Altova.Functions.Lang.DayFromDatetime(Altova.CoreTypes.ParseDateTime(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ETD", "http://tempuri.org/CSCLBooking.xsd"), closure.var1_cur_filter_elements))))));
                                var2_cast = (Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(var3_day_from_datetime)));
                                if (!((var2_cast) < (10m))) { state = 11; goto case 11; }
                                current = Altova.Functions.Core.Concat("0", Altova.Functions.Core.ToString(var2_cast));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong((int)Altova.Functions.Core.First(Altova.Functions.Core.Box(var3_day_from_datetime)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq11_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq11_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq11_create_element closure;
                string var6_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var5_filter_elements;
                IEnumerator var8_map_filter_elements;
                string var7_cast;
                System.Collections.IEnumerable var9_filter_elements;
                public Enumerator(seq11_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var6_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var6_const_), Altova.Functions.Core.Box("11"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var5_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ReceiptCode", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var5_filter_elements))) { state = 10; goto case 10; }
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var7_cast))) { state = 25; goto case 25; }
                                Altova.Functions.Core.ThrowUserException("\u6536\u8D27\u5730\u4E0D\u80FD\u4E3A\u7A7A\uFF01");
                                goto case 10;
                            case 11:
                                state = 35;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                var8_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 35;
                            case 25:
                                state = 10;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("PLACE OF RECEIPT CODE", var6_const_), Altova.Functions.Core.Box(var7_cast));
                                pos++;
                                return true;
                            case 35:
                                state = 35;
                                if (!var8_map_filter_elements.MoveNext()) { state = 36; goto case 36; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Receipt", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var8_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 35; goto case 35; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("PLACE OF RECEIPT", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements))));
                                pos++;
                                return true;
                            case 36:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                }
            }

        }
        class seq12_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq12_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq12_create_element closure;
                string var6_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var5_filter_elements;
                System.Collections.IEnumerable var11_filter_elements;
                string var7_cast;
                IEnumerator var8_map_filter_elements;
                System.Collections.IEnumerable var9_filter_elements;
                IEnumerator var10_map_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                IEnumerator var14_map_filter_elements;
                string var13_cast;
                System.Collections.IEnumerable var15_filter_elements;
                IEnumerator var16_map_filter_elements;
                System.Collections.IEnumerable var17_filter_elements;
                IEnumerator var19_map_filter_elements;
                string var18_cast;
                System.Collections.IEnumerable var20_filter_elements;
                public Enumerator(seq12_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var6_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var6_const_), Altova.Functions.Core.Box("12"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var5_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("LoadPortCode", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var5_filter_elements))) { state = 10; goto case 10; }
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var7_cast))) { state = 25; goto case 25; }
                                Altova.Functions.Core.ThrowUserException("\u88C5\u8D27\u6E2F\u4E0D\u80FD\u4E3A\u7A7A\uFF01");
                                goto case 10;
                            case 11:
                                state = 35;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                var11_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements)));
                                var8_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 35;
                            case 25:
                                state = 10;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("LOAD PORT CODE", var6_const_), Altova.Functions.Core.Box(var7_cast));
                                pos++;
                                return true;
                            case 35:
                                state = 35;
                                if (!var8_map_filter_elements.MoveNext()) { state = 36; goto case 36; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("LoadPort", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var8_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 35; goto case 35; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("LOAD PORT", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements))));
                                pos++;
                                return true;
                            case 36:
                                state = 46;
                                Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                                var10_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 46;
                            case 46:
                                state = 46;
                                if (!var10_map_filter_elements.MoveNext()) { state = 47; goto case 47; }
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("DischargePortCode", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var10_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 46; goto case 46; }
                                var13_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var13_cast))) { state = 61; goto case 61; }
                                Altova.Functions.Core.ThrowUserException("\u5378\u88C5\u8D27\u6E2F\u4E0D\u80FD\u4E3A\u7A7A\uFF01");
                                goto case 46;
                            case 47:
                                state = 71;
                                Altova.Mapforce.MFEnumerator.Dispose(var10_map_filter_elements); var10_map_filter_elements = null;
                                var14_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 71;
                            case 61:
                                state = 46;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("DISCHARGE PORT CODE", var6_const_), Altova.Functions.Core.Box(var13_cast));
                                pos++;
                                return true;
                            case 71:
                                state = 71;
                                if (!var14_map_filter_elements.MoveNext()) { state = 72; goto case 72; }
                                var15_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("DischargePort", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var14_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var15_filter_elements))) { state = 71; goto case 71; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("DISCHARGE PORT", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var15_filter_elements))));
                                pos++;
                                return true;
                            case 72:
                                state = 82;
                                Altova.Mapforce.MFEnumerator.Dispose(var14_map_filter_elements); var14_map_filter_elements = null;
                                var16_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 82;
                            case 82:
                                state = 82;
                                if (!var16_map_filter_elements.MoveNext()) { state = 83; goto case 83; }
                                var17_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("DeliveryPortCode", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var16_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var17_filter_elements))) { state = 82; goto case 82; }
                                var18_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var17_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var18_cast))) { state = 97; goto case 97; }
                                Altova.Functions.Core.ThrowUserException("\u5378\u88C5\u8D27\u6E2F\u4E0D\u80FD\u4E3A\u7A7A\uFF01");
                                goto case 82;
                            case 83:
                                state = 107;
                                Altova.Mapforce.MFEnumerator.Dispose(var16_map_filter_elements); var16_map_filter_elements = null;
                                var19_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 107;
                            case 97:
                                state = 82;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("DELIVERY PORT", var6_const_), Altova.Functions.Core.Box(var18_cast));
                                pos++;
                                return true;
                            case 107:
                                state = 107;
                                if (!var19_map_filter_elements.MoveNext()) { state = 108; goto case 108; }
                                var20_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("DeliveryPort", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var19_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var20_filter_elements))) { state = 107; goto case 107; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("PLACE OF DELIVERY", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var20_filter_elements))));
                                pos++;
                                return true;
                            case 108:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var19_map_filter_elements); var19_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var10_map_filter_elements); var10_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var14_map_filter_elements); var14_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var16_map_filter_elements); var16_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var19_map_filter_elements); var19_map_filter_elements = null;
                }
            }

        }
        class seq13_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var2_CSCLBooking2;

            public seq13_create_element(
                Altova.Mapforce.IMFNode var2_CSCLBooking2
                )
            {
                this.var2_CSCLBooking2 = var2_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq13_create_element closure;
                string var4_const_http___tempuri_org_C;
                System.Collections.IEnumerable var5_filter_elements;
                string var1_const_;
                IEnumerator var3_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                System.Collections.IEnumerable var11_filter_elements;
                string var7_cast;
                IEnumerator var8_map_filter_elements;
                System.Collections.IEnumerable var9_filter_elements;
                IEnumerator var10_map_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                IEnumerator var15_map_filter_elements;
                System.Collections.IEnumerable var13_vmf1_inputtoresult;
                System.Collections.IEnumerable var16_filter_elements;
                string var14_vmf1_inputtoresult;
                IEnumerator var17_map_filter_elements;
                System.Collections.IEnumerable var18_filter_elements;
                IEnumerator var19_map_filter_elements;
                System.Collections.IEnumerable var20_filter_elements;
                IEnumerator var22_map_filter_elements;
                string var21_cast;
                System.Collections.IEnumerable var23_filter_elements;
                string var24_cast;
                public Enumerator(seq13_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var4_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var5_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var4_const_http___tempuri_org_C), closure.var2_CSCLBooking2));
                                var1_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var1_const_), Altova.Functions.Core.Box("14"));
                                pos++;
                                return true;
                            case 5:
                                state = 6;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("BOOKING NO.ID", var1_const_), Altova.Functions.Core.Box("F"));
                                pos++;
                                return true;
                            case 6:
                                state = 11;
                                if (!(Altova.Functions.Core.Exists(var5_filter_elements))) { state = 0; return false; }
                                var3_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements))).GetEnumerator();
                                goto case 11;
                            case 11:
                                state = 11;
                                if (!var3_map_filter_elements.MoveNext()) { state = 12; goto case 12; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("BookingNO", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var3_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 11; goto case 11; }
                                var7_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var7_cast))) { state = 26; goto case 26; }
                                Altova.Functions.Core.ThrowUserException("\u8BA2\u8231\u53F7\u4E0D\u80FD\u4E3A\u7A7A\uFF01");
                                goto case 11;
                            case 12:
                                state = 36;
                                Altova.Mapforce.MFEnumerator.Dispose(var3_map_filter_elements); var3_map_filter_elements = null;
                                var11_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements)));
                                var8_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 36;
                            case 26:
                                state = 11;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("BOOKING NO.", var1_const_), Altova.Functions.Core.Box(var7_cast));
                                pos++;
                                return true;
                            case 36:
                                state = 36;
                                if (!var8_map_filter_elements.MoveNext()) { state = 37; goto case 37; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("DeliveryTerm", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var8_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 36; goto case 36; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("DELIVERY TERM", var1_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements))));
                                pos++;
                                return true;
                            case 37:
                                state = 47;
                                Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                                var10_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 47;
                            case 47:
                                state = 47;
                                if (!var10_map_filter_elements.MoveNext()) { state = 48; goto case 48; }
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("PaymentTerm", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var10_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 47; goto case 47; }
                                var13_vmf1_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf1_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var13_vmf1_inputtoresult))) { state = 47; goto case 47; }
                                var14_vmf1_inputtoresult = ((string)Altova.Functions.Core.First(var13_vmf1_inputtoresult));
                                if (!(Altova.Functions.Lang.Empty(var14_vmf1_inputtoresult))) { state = 66; goto case 66; }
                                Altova.Functions.Core.ThrowUserException("\u4ED8\u6B3E\u65B9\u5F0F\u4E0D\u80FD\u4E3A\u7A7A\uFF01");
                                goto case 47;
                            case 48:
                                state = 80;
                                Altova.Mapforce.MFEnumerator.Dispose(var10_map_filter_elements); var10_map_filter_elements = null;
                                var15_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 80;
                            case 66:
                                state = 47;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("PREPAID OR COLLECT", var1_const_), Altova.Functions.Core.Box(var14_vmf1_inputtoresult));
                                pos++;
                                return true;
                            case 80:
                                state = 80;
                                if (!var15_map_filter_elements.MoveNext()) { state = 81; goto case 81; }
                                var16_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("QuotationNO", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var15_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var16_filter_elements))) { state = 80; goto case 80; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("QUOTATION NO.", var1_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var16_filter_elements))));
                                pos++;
                                return true;
                            case 81:
                                state = 91;
                                Altova.Mapforce.MFEnumerator.Dispose(var15_map_filter_elements); var15_map_filter_elements = null;
                                var17_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 91;
                            case 91:
                                state = 91;
                                if (!var17_map_filter_elements.MoveNext()) { state = 92; goto case 92; }
                                var18_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("SCNO", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var17_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var18_filter_elements))) { state = 91; goto case 91; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("S/C NO.", var1_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var18_filter_elements))));
                                pos++;
                                return true;
                            case 92:
                                state = 102;
                                Altova.Mapforce.MFEnumerator.Dispose(var17_map_filter_elements); var17_map_filter_elements = null;
                                var19_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 102;
                            case 102:
                                state = 102;
                                if (!var19_map_filter_elements.MoveNext()) { state = 103; goto case 103; }
                                var20_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("SCACCode", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var19_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var20_filter_elements))) { state = 102; goto case 102; }
                                var21_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var20_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var21_cast))) { state = 115; goto case 115; }
                                goto case 102;
                            case 103:
                                state = 119;
                                Altova.Mapforce.MFEnumerator.Dispose(var19_map_filter_elements); var19_map_filter_elements = null;
                                var22_map_filter_elements = (var11_filter_elements).GetEnumerator();
                                goto case 119;
                            case 115:
                                state = 102;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("SCAC CODE", var1_const_), Altova.Functions.Core.Box(var21_cast));
                                pos++;
                                return true;
                            case 119:
                                state = 119;
                                if (!var22_map_filter_elements.MoveNext()) { state = 120; goto case 120; }
                                var23_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("HBLNO", var4_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var22_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var23_filter_elements))) { state = 119; goto case 119; }
                                var24_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var23_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var24_cast))) { state = 132; goto case 132; }
                                goto case 119;
                            case 120:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var22_map_filter_elements); var22_map_filter_elements = null;
                                return false;
                            case 132:
                                state = 119;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("H B/L", var1_const_), Altova.Functions.Core.Box(var24_cast));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var3_map_filter_elements); var3_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var10_map_filter_elements); var10_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var15_map_filter_elements); var15_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var17_map_filter_elements); var17_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var19_map_filter_elements); var19_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var22_map_filter_elements); var22_map_filter_elements = null;
                }
            }

        }
        class seq14_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq14_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq14_create_element closure;
                System.Collections.IEnumerable var10_const_20;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                System.Collections.IEnumerable var8_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                IEnumerator var7_map_filter_elements;
                System.Collections.IEnumerable var9_filter_elements;
                IEnumerator var11_map_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                string var13_cast;
                public Enumerator(seq14_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var10_const_20 = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.Box("20"));
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), var10_const_20);
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements)));
                                var2_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ShipperInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("SHIPPER", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 21;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                var7_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 21;
                            case 21:
                                state = 21;
                                if (!var7_map_filter_elements.MoveNext()) { state = 22; goto case 22; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("RealShipperInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var7_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 21; goto case 21; }
                                if (!(Altova.Functions.Lang.Empty(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements))))) { state = 34; goto case 34; }
                                goto case 21;
                            case 22:
                                state = 38;
                                Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                                var11_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 38;
                            case 34:
                                state = 21;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID2", var5_const_), Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_const_20)));
                                pos++;
                                return true;
                            case 38:
                                state = 38;
                                if (!var11_map_filter_elements.MoveNext()) { state = 39; goto case 39; }
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("RealShipperInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var11_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 38; goto case 38; }
                                var13_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var13_cast))) { state = 51; goto case 51; }
                                goto case 38;
                            case 39:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                                return false;
                            case 51:
                                state = 38;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("SHIPPER2", var5_const_), Altova.Functions.Core.Box(var13_cast));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                }
            }

        }
        class seq15_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq15_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq15_create_element closure;
                System.Collections.IEnumerable var10_const_21;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                System.Collections.IEnumerable var8_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                IEnumerator var7_map_filter_elements;
                System.Collections.IEnumerable var9_filter_elements;
                IEnumerator var11_map_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                string var13_cast;
                public Enumerator(seq15_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var10_const_21 = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.Box("21"));
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), var10_const_21);
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements)));
                                var2_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ConsigneeInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CONSIGNEE", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 21;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                var7_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 21;
                            case 21:
                                state = 21;
                                if (!var7_map_filter_elements.MoveNext()) { state = 22; goto case 22; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("RealConsigneeInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var7_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 21; goto case 21; }
                                if (!(Altova.Functions.Lang.Empty(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements))))) { state = 34; goto case 34; }
                                goto case 21;
                            case 22:
                                state = 38;
                                Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                                var11_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 38;
                            case 34:
                                state = 21;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID2", var5_const_), Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_const_21)));
                                pos++;
                                return true;
                            case 38:
                                state = 38;
                                if (!var11_map_filter_elements.MoveNext()) { state = 39; goto case 39; }
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("RealConsigneeInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var11_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 38; goto case 38; }
                                var13_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var13_cast))) { state = 51; goto case 51; }
                                goto case 38;
                            case 39:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                                return false;
                            case 51:
                                state = 38;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CONSIGNEE2", var5_const_), Altova.Functions.Core.Box(var13_cast));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                }
            }

        }
        class seq16_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq16_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq16_create_element closure;
                System.Collections.IEnumerable var10_const_22;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                System.Collections.IEnumerable var8_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                IEnumerator var7_map_filter_elements;
                System.Collections.IEnumerable var9_filter_elements;
                IEnumerator var11_map_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                string var13_cast;
                public Enumerator(seq16_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var10_const_22 = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.Box("22"));
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), var10_const_22);
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var8_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements)));
                                var2_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("NotifyInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("NOTIFY", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 21;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                var7_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 21;
                            case 21:
                                state = 21;
                                if (!var7_map_filter_elements.MoveNext()) { state = 22; goto case 22; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("RealNotifyInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var7_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var9_filter_elements))) { state = 21; goto case 21; }
                                if (!(Altova.Functions.Lang.Empty(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var9_filter_elements))))) { state = 34; goto case 34; }
                                goto case 21;
                            case 22:
                                state = 38;
                                Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                                var11_map_filter_elements = (var8_filter_elements).GetEnumerator();
                                goto case 38;
                            case 34:
                                state = 21;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID2", var5_const_), Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var10_const_22)));
                                pos++;
                                return true;
                            case 38:
                                state = 38;
                                if (!var11_map_filter_elements.MoveNext()) { state = 39; goto case 39; }
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("RealNotifyInfo", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var11_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 38; goto case 38; }
                                var13_cast = (Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements)));
                                if (!(Altova.Functions.Lang.Empty(var13_cast))) { state = 51; goto case 51; }
                                goto case 38;
                            case 39:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                                return false;
                            case 51:
                                state = 38;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("NOTIFY2", var5_const_), Altova.Functions.Core.Box(var13_cast));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var7_map_filter_elements); var7_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                }
            }

        }
        class seq17_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq17_create_element(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq17_create_element closure;
                string var4_const_http___tempuri_org_C;
                System.Collections.IEnumerable var5_filter_elements;
                System.Collections.IEnumerable var3_filter_elements;
                string var2_const_;
                public Enumerator(seq17_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var4_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var5_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("QTY", var4_const_http___tempuri_org_C), closure.var1_cur_filter_elements));
                                var3_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ContainerType", var4_const_http___tempuri_org_C), closure.var1_cur_filter_elements));
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var2_const_), Altova.Functions.Core.Box("40"));
                                pos++;
                                return true;
                            case 5:
                                state = 7;
                                if (!(Altova.Functions.Core.Exists(var3_filter_elements))) { state = 7; goto case 7; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CTN.SIZE&TYPE", var2_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var3_filter_elements))));
                                pos++;
                                return true;
                            case 7:
                                state = 16;
                                if (!(Altova.Functions.Core.Exists(var5_filter_elements))) { state = 14; goto case 14; }
                                goto case 16;
                            case 14:
                                state = 20;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CTN.STATUS", var2_const_), Altova.Functions.Core.Box("F"));
                                pos++;
                                return true;
                            case 16:
                                state = 14;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CTN.NUMBERS", var2_const_), Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements)))))))))));
                                pos++;
                                return true;
                            case 20:
                                state = 0;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("COUNTAINER SOC.", var2_const_), Altova.Functions.Core.Box("N"));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq18_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq18_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq18_create_element closure;
                string var6_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                System.Collections.IEnumerable var9_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var5_filter_elements;
                IEnumerator var8_map_filter_elements;
                System.Collections.IEnumerable var7_vmf2_inputtoresult;
                System.Collections.IEnumerable var10_filter_elements;
                IEnumerator var11_map_filter_elements;
                System.Collections.IEnumerable var12_filter_elements;
                IEnumerator var13_map_filter_elements;
                System.Collections.IEnumerable var14_filter_elements;
                public Enumerator(seq18_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var6_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD-ID", var6_const_), Altova.Functions.Core.Box("41"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var9_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements)));
                                var2_map_filter_elements = (var9_filter_elements).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var5_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CargoID", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var5_filter_elements))) { state = 10; goto case 10; }
                                var7_vmf2_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf2_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var5_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var7_vmf2_inputtoresult))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CARGO ID", var6_const_), Altova.Functions.Core.Box((string)Altova.Functions.Core.First(var7_vmf2_inputtoresult)));
                                pos++;
                                return true;
                            case 11:
                                state = 27;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                var8_map_filter_elements = (var9_filter_elements).GetEnumerator();
                                goto case 27;
                            case 27:
                                state = 27;
                                if (!var8_map_filter_elements.MoveNext()) { state = 28; goto case 28; }
                                var10_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Qty", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var8_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var10_filter_elements))) { state = 27; goto case 27; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("NUMBERS OF PKGS-1", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var10_filter_elements))))));
                                pos++;
                                return true;
                            case 28:
                                state = 38;
                                Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                                var11_map_filter_elements = (var9_filter_elements).GetEnumerator();
                                goto case 38;
                            case 38:
                                state = 38;
                                if (!var11_map_filter_elements.MoveNext()) { state = 39; goto case 39; }
                                var12_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Weight", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var11_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var12_filter_elements))) { state = 38; goto case 38; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CARGO GROSS WT-1", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var12_filter_elements))))));
                                pos++;
                                return true;
                            case 39:
                                state = 49;
                                Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                                var13_map_filter_elements = (var9_filter_elements).GetEnumerator();
                                goto case 49;
                            case 49:
                                state = 49;
                                if (!var13_map_filter_elements.MoveNext()) { state = 50; goto case 50; }
                                var14_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Volume", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var13_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var14_filter_elements))) { state = 49; goto case 49; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CARGO MEASUREMENT-1", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.ParseDecimal(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var14_filter_elements))))));
                                pos++;
                                return true;
                            case 50:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var13_map_filter_elements); var13_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var8_map_filter_elements); var8_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var11_map_filter_elements); var11_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var13_map_filter_elements); var13_map_filter_elements = null;
                }
            }

        }
        class seq19_if_exists : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq19_if_exists(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq19_if_exists closure;
                System.Collections.IEnumerable var2_filter_elements;
                System.Collections.IEnumerable var3_vmf2_inputtoresult;
                public Enumerator(seq19_if_exists closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CargoID", "http://tempuri.org/CSCLBooking.xsd"), closure.var1_cur_filter_elements));
                                if (!(Altova.Functions.Core.Exists(var2_filter_elements))) { state = 18; goto case 18; }
                                var3_vmf2_inputtoresult = new Altova.Functions.Core.SequenceCache(vmf.vmf2_inputtoresult.Create(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var2_filter_elements))));
                                if (!(Altova.Functions.Core.Exists(var3_vmf2_inputtoresult))) { state = 15; goto case 15; }
                                current = ((string)Altova.Functions.Core.First(var3_vmf2_inputtoresult)) == ("R");
                                pos++;
                                return true;
                            case 15:
                                state = 0;
                                current = Altova.CoreTypes.ParseBoolean("false");
                                pos++;
                                return true;
                            case 18:
                                state = 0;
                                current = Altova.CoreTypes.ParseBoolean("false");
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq20_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var2_cur_filter_elements;

            public seq20_create_element(
                Altova.Mapforce.IMFNode var2_cur_filter_elements
                )
            {
                this.var2_cur_filter_elements = var2_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq20_create_element closure;
                string var1_const_;
                public Enumerator(seq20_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var1_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORDE ID", var1_const_), Altova.Functions.Core.Box("43"));
                                pos++;
                                return true;
                            case 5:
                                state = 0;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("TEMPERATURE SETTING", var1_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("TemperatureSetting", "http://tempuri.org/CSCLBooking.xsd"), closure.var2_cur_filter_elements)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq21_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq21_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq21_create_element closure;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                public Enumerator(seq21_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), Altova.Functions.Core.Box("44"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Marks", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CARGO DESCRIPTION(1-5)", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                }
            }

        }
        class seq22_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq22_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq22_create_element closure;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                public Enumerator(seq22_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), Altova.Functions.Core.Box("47"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CargoDESC", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("CARGO DESCRIPTION", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                }
            }

        }
        class seq23_create_element : IEnumerable
        {

            public seq23_create_element(
                )
            {
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq23_create_element closure;
                string var1_const_;
                public Enumerator(seq23_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var1_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var1_const_), Altova.Functions.Core.Box("60"));
                                pos++;
                                return true;
                            case 5:
                                state = 0;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("FREIGHT CLAUSE-I\uFF081-2\uFF09", var1_const_), Altova.Functions.Core.Box("P"));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq24_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq24_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq24_create_element closure;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                public Enumerator(seq24_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), Altova.Functions.Core.Box("70"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Remarks", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("REMARKS", var5_const_), Altova.Functions.Core.Box(Altova.Functions.Lang.Left(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements)), Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong(Altova.CoreTypes.DecimalToInteger(50m))))));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                }
            }

        }
        class seq25_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq25_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq25_create_element closure;
                string var5_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                System.Collections.IEnumerable var6_filter_elements;
                public Enumerator(seq25_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var5_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var5_const_), Altova.Functions.Core.Box("71"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 10;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var6_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("TypeOfBLForm", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var6_filter_elements))) { state = 10; goto case 10; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("TYPE OF B/L FORM", var5_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var6_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                }
            }

        }
        class seq26_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var2_cur_filter_elements;

            public seq26_create_element(
                Altova.Mapforce.IMFNode var2_cur_filter_elements
                )
            {
                this.var2_cur_filter_elements = var2_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq26_create_element closure;
                string var1_const_;
                public Enumerator(seq26_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var1_const_ = ("");
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var1_const_), Altova.Functions.Core.Box("80"));
                                pos++;
                                return true;
                            case 5:
                                state = 0;
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("SeaDesc", var1_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("BookingRemarks", "http://tempuri.org/CSCLBooking.xsd"), closure.var2_cur_filter_elements)))));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq27_create_element : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_CSCLBooking2;

            public seq27_create_element(
                Altova.Mapforce.IMFNode var1_CSCLBooking2
                )
            {
                this.var1_CSCLBooking2 = var1_CSCLBooking2;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq27_create_element closure;
                string var6_const_;
                string var3_const_http___tempuri_org_C;
                System.Collections.IEnumerable var4_filter_elements;
                IEnumerator var2_map_filter_elements;
                IEnumerator var5_map_filter_elements;
                System.Collections.IEnumerable var7_filter_elements;
                public Enumerator(seq27_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var6_const_ = ("");
                                var3_const_http___tempuri_org_C = ("http://tempuri.org/CSCLBooking.xsd");
                                var4_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("CSCLBooking", var3_const_http___tempuri_org_C), closure.var1_CSCLBooking2));
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD ID", var6_const_), Altova.Functions.Core.Box("99"));
                                pos++;
                                return true;
                            case 5:
                                state = 10;
                                if (!(Altova.Functions.Core.Exists(var4_filter_elements))) { state = 0; return false; }
                                var2_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("MBL", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var4_filter_elements))).GetEnumerator();
                                goto case 10;
                            case 10:
                                state = 14;
                                if (!var2_map_filter_elements.MoveNext()) { state = 11; goto case 11; }
                                var5_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Container", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var2_map_filter_elements.Current))).GetEnumerator();
                                goto case 14;
                            case 11:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                                return false;
                            case 14:
                                state = 14;
                                if (!var5_map_filter_elements.MoveNext()) { state = 15; goto case 15; }
                                var7_filter_elements = new Altova.Functions.Core.SequenceCache(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("NUM", var3_const_http___tempuri_org_C), (Altova.Mapforce.IMFNode)(var5_map_filter_elements.Current)));
                                if (!(Altova.Functions.Core.Exists(var7_filter_elements))) { state = 14; goto case 14; }
                                current = Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName("RECORD TOTAL OF FILE", var6_const_), Altova.Functions.Core.Box(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(var7_filter_elements))));
                                pos++;
                                return true;
                            case 15:
                                state = 10;
                                Altova.Mapforce.MFEnumerator.Dispose(var5_map_filter_elements); var5_map_filter_elements = null;
                                goto case 10;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var5_map_filter_elements); var5_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var2_map_filter_elements); var2_map_filter_elements = null;
                }
            }

        }
    } 
}
