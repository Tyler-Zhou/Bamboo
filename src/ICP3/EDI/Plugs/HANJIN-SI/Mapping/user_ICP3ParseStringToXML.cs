////////////////////////////////////////////////////////////////////////
//
// user/ICP3ParseStringToXML.cs
//
// This file was generated by MapForce 2011r2.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the MapForce Documentation for further details.
// http://www.altova.com/mapforce
//
////////////////////////////////////////////////////////////////////////

using System.Collections;


// application.libraries
namespace HANJIN.SI

{



    public class ICP3ParseStringToXML : Altova.TraceProvider
    {




        #region Members
        // instances
        // members
        #endregion //Members

        class seq1_Main : IEnumerable
        {
            Altova.Functions.RuntimeContext var1_context;
            System.Collections.IEnumerable var2_string;
            System.Collections.IEnumerable var3_length;
            System.Collections.IEnumerable var4_maxRow;
            System.Collections.IEnumerable var5_style;

            public seq1_Main(
                Altova.Functions.RuntimeContext var1_context,
                System.Collections.IEnumerable var2_string,
                System.Collections.IEnumerable var3_length,
                System.Collections.IEnumerable var4_maxRow,
                System.Collections.IEnumerable var5_style
                )
            {
                this.var1_context = var1_context;
                this.var2_string = var2_string;
                this.var3_length = var3_length;
                this.var4_maxRow = var4_maxRow;
                this.var5_style = var5_style;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq1_Main closure;
                string var11_const_;
                string var10_const_ICP3ParseStringToXml;
                string var7_const_http___schemas_xmlso;
                Altova.Types.QName var9_create_qname;
                Altova.Types.QName var8_create_qname;
                IEnumerator var6_map_filter_elements;
                IEnumerator var12_map_filter_elements;
                string var14_const_http___www_CityOcean;
                IEnumerator var13_map_filter_elements;
                public Enumerator(seq1_Main closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var11_const_ = ("");
                                var10_const_ICP3ParseStringToXml = ("ICP3ParseStringToXml");
                                var7_const_http___schemas_xmlso = ("http://schemas.xmlsoap.org/soap/envelope/");
                                var9_create_qname = (Altova.Functions.Core.CreateQName("Body", var7_const_http___schemas_xmlso));
                                var8_create_qname = (Altova.Functions.Core.CreateQName("Envelope", var7_const_http___schemas_xmlso));
                                var6_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("Fault", var7_const_http___schemas_xmlso), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(var9_create_qname, (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(var8_create_qname, Altova.Xml.InternalXML.CallWebservice(Altova.Functions.Core.CreateElement(var8_create_qname, Altova.Functions.Core.Box(Altova.Functions.Core.CreateElement(var9_create_qname, Altova.Functions.Core.Box(Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName(var10_const_ICP3ParseStringToXml, "http://www.CityOcean.com/"), (new seq2_create_element(closure.var2_string, closure.var3_length, closure.var4_maxRow, closure.var5_style))))))), "Service1", var10_const_ICP3ParseStringToXml, Altova.Functions.Lang.StringAsQName("{http://www.CityOcean.com/}ICP3ParseStringToXml"), "http://www.CityOcean.com/ICP3ParseStringToXml", "http://app.cityocean.com:83/ICP3EDIService.asmx", "document", var11_const_, var11_const_, 0, var11_const_, var11_const_, 1))))))).GetEnumerator();
                                goto case 5;
                            case 5:
                                state = 9;
                                if (!var6_map_filter_elements.MoveNext()) { state = 6; goto case 6; }
                                var12_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("detail", var11_const_), (Altova.Mapforce.IMFNode)(var6_map_filter_elements.Current))).GetEnumerator();
                                goto case 9;
                            case 6:
                                state = 19;
                                Altova.Mapforce.MFEnumerator.Dispose(var6_map_filter_elements); var6_map_filter_elements = null;
                                var14_const_http___www_CityOcean = ("http://www.CityOcean.com/");
                                var13_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ICP3ParseStringToXmlResponse", var14_const_http___www_CityOcean), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(var9_create_qname, (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(var8_create_qname, Altova.Xml.InternalXML.CallWebservice(Altova.Functions.Core.CreateElement(var8_create_qname, Altova.Functions.Core.Box(Altova.Functions.Core.CreateElement(var9_create_qname, Altova.Functions.Core.Box(Altova.Functions.Core.CreateElement(Altova.Functions.Core.CreateQName(var10_const_ICP3ParseStringToXml, var14_const_http___www_CityOcean), (new seq2_create_element(closure.var2_string, closure.var3_length, closure.var4_maxRow, closure.var5_style))))))), "Service1", var10_const_ICP3ParseStringToXml, Altova.Functions.Lang.StringAsQName("{http://www.CityOcean.com/}ICP3ParseStringToXml"), "http://www.CityOcean.com/ICP3ParseStringToXml", "http://app.cityocean.com:83/ICP3EDIService.asmx", "document", var11_const_, var11_const_, 0, var11_const_, var11_const_, 1))))))).GetEnumerator();
                                goto case 19;
                            case 9:
                                state = 9;
                                if (!var12_map_filter_elements.MoveNext()) { state = 10; goto case 10; }
                                Altova.Functions.Core.ThrowUserException(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)(var12_map_filter_elements.Current)));
                                goto case 9;
                            case 10:
                                state = 5;
                                Altova.Mapforce.MFEnumerator.Dispose(var12_map_filter_elements); var12_map_filter_elements = null;
                                goto case 5;
                            case 19:
                                state = 19;
                                if (!var13_map_filter_elements.MoveNext()) { state = 20; goto case 20; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Header", var11_const_), var11_const_, (new seq3_cond_create_element_with_prefix((Altova.Mapforce.IMFNode)(var13_map_filter_elements.Current))));
                                pos++;
                                return true;
                            case 20:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var13_map_filter_elements); var13_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var12_map_filter_elements); var12_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var6_map_filter_elements); var6_map_filter_elements = null;
                    Altova.Mapforce.MFEnumerator.Dispose(var13_map_filter_elements); var13_map_filter_elements = null;
                }
            }

        }
        class seq2_create_element : IEnumerable
        {
            System.Collections.IEnumerable var1_string;
            System.Collections.IEnumerable var2_length;
            System.Collections.IEnumerable var3_maxRow;
            System.Collections.IEnumerable var4_style;

            public seq2_create_element(
                System.Collections.IEnumerable var1_string,
                System.Collections.IEnumerable var2_length,
                System.Collections.IEnumerable var3_maxRow,
                System.Collections.IEnumerable var4_style
                )
            {
                this.var1_string = var1_string;
                this.var2_length = var2_length;
                this.var3_maxRow = var3_maxRow;
                this.var4_style = var4_style;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq2_create_element closure;
                public Enumerator(seq2_create_element closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 6;
                                if (!(Altova.Functions.Core.Exists(closure.var1_string))) { state = 6; goto case 6; }
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("valString", "http://www.CityOcean.com/"), "", Altova.Functions.Core.Box((string)Altova.Functions.Core.First(closure.var1_string)));
                                pos++;
                                return true;
                            case 6:
                                state = 15;
                                if (!(Altova.Functions.Core.Exists(closure.var2_length))) { state = 13; goto case 13; }
                                goto case 15;
                            case 13:
                                state = 22;
                                if (!(Altova.Functions.Core.Exists(closure.var3_maxRow))) { state = 20; goto case 20; }
                                goto case 22;
                            case 15:
                                state = 13;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("rowLength", "http://www.CityOcean.com/"), "", Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong(Altova.CoreTypes.LongToInt(Altova.CoreTypes.DecimalToLong((decimal)Altova.Functions.Core.First(closure.var2_length))))))));
                                pos++;
                                return true;
                            case 20:
                                state = 29;
                                if (!(Altova.Functions.Core.Exists(closure.var4_style))) { state = 0; return false; }
                                goto case 29;
                            case 22:
                                state = 20;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("maxRow", "http://www.CityOcean.com/"), "", Altova.Functions.Core.Box(Altova.CoreTypes.DecimalToString(Altova.CoreTypes.LongToDecimal(Altova.CoreTypes.IntToLong((int)Altova.Functions.Core.First(closure.var3_maxRow))))));
                                pos++;
                                return true;
                            case 29:
                                state = 0;
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("style", "http://www.CityOcean.com/"), "", Altova.Functions.Core.Box((string)Altova.Functions.Core.First(closure.var4_style)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq3_cond_create_element_with_prefix : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq3_cond_create_element_with_prefix(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq3_cond_create_element_with_prefix closure;
                string var2_const_;
                public Enumerator(seq3_cond_create_element_with_prefix closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                if (!(Altova.Functions.Core.Exists(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ICP3ParseStringToXmlResult", "http://www.CityOcean.com/"), closure.var1_cur_filter_elements)))) { state = 0; return false; }
                                var2_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("List", var2_const_), var2_const_, (new seq4_map_filter_elements(closure.var1_cur_filter_elements)));
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq4_map_filter_elements : IEnumerable
        {
            Altova.Mapforce.IMFNode var3_cur_filter_elements;

            public seq4_map_filter_elements(
                Altova.Mapforce.IMFNode var3_cur_filter_elements
                )
            {
                this.var3_cur_filter_elements = var3_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq4_map_filter_elements closure;
                string var2_const_http___www_CityOcean;
                IEnumerator var1_map_filter_elements;
                string var4_const_;
                public Enumerator(seq4_map_filter_elements closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 5;
                                var2_const_http___www_CityOcean = ("http://www.CityOcean.com/");
                                var1_map_filter_elements = (Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("string", var2_const_http___www_CityOcean), (Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterElements(Altova.Functions.Core.CreateQName("ICP3ParseStringToXmlResult", var2_const_http___www_CityOcean), closure.var3_cur_filter_elements)))).GetEnumerator();
                                goto case 5;
                            case 5:
                                state = 5;
                                if (!var1_map_filter_elements.MoveNext()) { state = 6; goto case 6; }
                                var4_const_ = ("");
                                current = Altova.Functions.Core.CreateElementWithPrefix(Altova.Functions.Core.CreateQName("Item", var4_const_), var4_const_, (new seq5_if_if_exists((Altova.Mapforce.IMFNode)(var1_map_filter_elements.Current))));
                                pos++;
                                return true;
                            case 6:
                                state = 0;
                                Altova.Mapforce.MFEnumerator.Dispose(var1_map_filter_elements); var1_map_filter_elements = null;
                                return false;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                    Altova.Mapforce.MFEnumerator.Dispose(var1_map_filter_elements); var1_map_filter_elements = null;
                }
            }

        }
        class seq5_if_if_exists : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq5_if_if_exists(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq5_if_if_exists closure;
                public Enumerator(seq5_if_if_exists closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                if (!((bool)Altova.Functions.Core.First((new seq6_if_exists(closure.var1_cur_filter_elements))))) { state = 10; goto case 10; }
                                return false;
                            case 10:
                                state = 0;
                                current = Altova.CoreTypes.NodeToString(closure.var1_cur_filter_elements);
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }
        class seq6_if_exists : IEnumerable
        {
            Altova.Mapforce.IMFNode var1_cur_filter_elements;

            public seq6_if_exists(
                Altova.Mapforce.IMFNode var1_cur_filter_elements
                )
            {
                this.var1_cur_filter_elements = var1_cur_filter_elements;
            }

            public IEnumerator GetEnumerator() { return new Enumerator(this); }

            class Enumerator : Altova.Mapforce.IMFEnumerator
            {
                int state = 1;
                object current = null;
                int pos = 0;
                seq6_if_exists closure;
                Altova.Types.QName var2_create_qname;
                public Enumerator(seq6_if_exists closure)
                {
                    this.closure = closure;
                }

                public void Reset() { state = 0; pos = 0; }
                public int Position { get { return pos; } }
                public object Current { get { return current; } }

                public bool MoveNext()
                {
                    while (state != 0)
                    {
                        switch (state)
                        {
                            case 1:
                                state = 0;
                                var2_create_qname = (Altova.Functions.Core.CreateQName("nil", "http://www.w3.org/2001/XMLSchema-instance"));
                                if (!(Altova.Functions.Core.Exists(Altova.Functions.Core.FilterAttributes(var2_create_qname, closure.var1_cur_filter_elements)))) { state = 11; goto case 11; }
                                current = Altova.CoreTypes.ParseBoolean(Altova.CoreTypes.NodeToString((Altova.Mapforce.IMFNode)Altova.Functions.Core.First(Altova.Functions.Core.FilterAttributes(var2_create_qname, closure.var1_cur_filter_elements))));
                                pos++;
                                return true;
                            case 11:
                                state = 0;
                                current = Altova.CoreTypes.ParseBoolean("false");
                                pos++;
                                return true;
                        }
                    }
                    return false;
                }

                public void Dispose()
                {
                }
            }

        }


        public static IEnumerable Create(
            Altova.Functions.RuntimeContext var1_context,
            System.Collections.IEnumerable var2_string,
            System.Collections.IEnumerable var3_length,
            System.Collections.IEnumerable var4_maxRow,
            System.Collections.IEnumerable var5_style
            )
        {
            return new seq1_Main(
                var1_context,
                var2_string,
                var3_length,
                var4_maxRow,
                var5_style
                );

        }


    } 

}
