//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace LongWin.DataWarehouseReport.ServiceInterface {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("JobInfoSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class JobInfoSet : global::System.Data.DataSet {
        
        private JobInfoDataTable tableJobInfo;
        
        private FeeOfJobDataTable tableFeeOfJob;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JobInfoSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected JobInfoSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["JobInfo"] != null)) {
                    base.Tables.Add(new JobInfoDataTable(ds.Tables["JobInfo"]));
                }
                if ((ds.Tables["FeeOfJob"] != null)) {
                    base.Tables.Add(new FeeOfJobDataTable(ds.Tables["FeeOfJob"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public JobInfoDataTable JobInfo {
            get {
                return this.tableJobInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FeeOfJobDataTable FeeOfJob {
            get {
                return this.tableFeeOfJob;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            JobInfoSet cln = ((JobInfoSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["JobInfo"] != null)) {
                    base.Tables.Add(new JobInfoDataTable(ds.Tables["JobInfo"]));
                }
                if ((ds.Tables["FeeOfJob"] != null)) {
                    base.Tables.Add(new FeeOfJobDataTable(ds.Tables["FeeOfJob"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableJobInfo = ((JobInfoDataTable)(base.Tables["JobInfo"]));
            if ((initTable == true)) {
                if ((this.tableJobInfo != null)) {
                    this.tableJobInfo.InitVars();
                }
            }
            this.tableFeeOfJob = ((FeeOfJobDataTable)(base.Tables["FeeOfJob"]));
            if ((initTable == true)) {
                if ((this.tableFeeOfJob != null)) {
                    this.tableFeeOfJob.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "JobInfoSet";
            this.Prefix = "";
            this.Namespace = "LongWin.DataWarehouseReport.ServiceInterface";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableJobInfo = new JobInfoDataTable();
            base.Tables.Add(this.tableJobInfo);
            this.tableFeeOfJob = new FeeOfJobDataTable();
            base.Tables.Add(this.tableFeeOfJob);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJobInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFeeOfJob() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            JobInfoSet ds = new JobInfoSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void JobInfoRowChangeEventHandler(object sender, JobInfoRowChangeEvent e);
        
        public delegate void FeeOfJobRowChangeEventHandler(object sender, FeeOfJobRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JobInfoDataTable : global::System.Data.TypedTableBase<JobInfoRow> {
            
            private global::System.Data.DataColumn columnConsignId;
            
            private global::System.Data.DataColumn columnJobCode;
            
            private global::System.Data.DataColumn columnIsVerifyed;
            
            private global::System.Data.DataColumn columnBLNO;
            
            private global::System.Data.DataColumn columnContainerNo;
            
            private global::System.Data.DataColumn columnDiscPortName;
            
            private global::System.Data.DataColumn columnLoadPortname;
            
            private global::System.Data.DataColumn columnDestinationName;
            
            private global::System.Data.DataColumn columnConsignerName;
            
            private global::System.Data.DataColumn columnAgentName;
            
            private global::System.Data.DataColumn columnProfitByUSD;
            
            private global::System.Data.DataColumn columnAmountUSDByDR;
            
            private global::System.Data.DataColumn columnAmountUSDByCR;
            
            private global::System.Data.DataColumn columnTEU;
            
            private global::System.Data.DataColumn columnETD;
            
            private global::System.Data.DataColumn columnETA;
            
            private global::System.Data.DataColumn columnOperatorName;
            
            private global::System.Data.DataColumn columnVesselVoyage;
            
            private global::System.Data.DataColumn columnSalesName;
            
            private global::System.Data.DataColumn columnConsignerId;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobInfoDataTable() {
                this.TableName = "JobInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected JobInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsignIdColumn {
                get {
                    return this.columnConsignId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobCodeColumn {
                get {
                    return this.columnJobCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVerifyedColumn {
                get {
                    return this.columnIsVerifyed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLNOColumn {
                get {
                    return this.columnBLNO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContainerNoColumn {
                get {
                    return this.columnContainerNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DiscPortNameColumn {
                get {
                    return this.columnDiscPortName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoadPortnameColumn {
                get {
                    return this.columnLoadPortname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DestinationNameColumn {
                get {
                    return this.columnDestinationName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsignerNameColumn {
                get {
                    return this.columnConsignerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProfitByUSDColumn {
                get {
                    return this.columnProfitByUSD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountUSDByDRColumn {
                get {
                    return this.columnAmountUSDByDR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountUSDByCRColumn {
                get {
                    return this.columnAmountUSDByCR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TEUColumn {
                get {
                    return this.columnTEU;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ETDColumn {
                get {
                    return this.columnETD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ETAColumn {
                get {
                    return this.columnETA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorNameColumn {
                get {
                    return this.columnOperatorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VesselVoyageColumn {
                get {
                    return this.columnVesselVoyage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalesNameColumn {
                get {
                    return this.columnSalesName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsignerIdColumn {
                get {
                    return this.columnConsignerId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobInfoRow this[int index] {
                get {
                    return ((JobInfoRow)(this.Rows[index]));
                }
            }
            
            public event JobInfoRowChangeEventHandler JobInfoRowChanging;
            
            public event JobInfoRowChangeEventHandler JobInfoRowChanged;
            
            public event JobInfoRowChangeEventHandler JobInfoRowDeleting;
            
            public event JobInfoRowChangeEventHandler JobInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJobInfoRow(JobInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobInfoRow AddJobInfoRow(
                        System.Guid ConsignId, 
                        string JobCode, 
                        bool IsVerifyed, 
                        string BLNO, 
                        string ContainerNo, 
                        string DiscPortName, 
                        string LoadPortname, 
                        string DestinationName, 
                        string ConsignerName, 
                        string AgentName, 
                        decimal ProfitByUSD, 
                        decimal AmountUSDByDR, 
                        decimal AmountUSDByCR, 
                        decimal TEU, 
                        System.DateTime ETD, 
                        System.DateTime ETA, 
                        string OperatorName, 
                        string VesselVoyage, 
                        string SalesName, 
                        System.Guid ConsignerId) {
                JobInfoRow rowJobInfoRow = ((JobInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConsignId,
                        JobCode,
                        IsVerifyed,
                        BLNO,
                        ContainerNo,
                        DiscPortName,
                        LoadPortname,
                        DestinationName,
                        ConsignerName,
                        AgentName,
                        ProfitByUSD,
                        AmountUSDByDR,
                        AmountUSDByCR,
                        TEU,
                        ETD,
                        ETA,
                        OperatorName,
                        VesselVoyage,
                        SalesName,
                        ConsignerId};
                rowJobInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJobInfoRow);
                return rowJobInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JobInfoDataTable cln = ((JobInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JobInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsignId = base.Columns["ConsignId"];
                this.columnJobCode = base.Columns["JobCode"];
                this.columnIsVerifyed = base.Columns["IsVerifyed"];
                this.columnBLNO = base.Columns["BLNO"];
                this.columnContainerNo = base.Columns["ContainerNo"];
                this.columnDiscPortName = base.Columns["DiscPortName"];
                this.columnLoadPortname = base.Columns["LoadPortname"];
                this.columnDestinationName = base.Columns["DestinationName"];
                this.columnConsignerName = base.Columns["ConsignerName"];
                this.columnAgentName = base.Columns["AgentName"];
                this.columnProfitByUSD = base.Columns["ProfitByUSD"];
                this.columnAmountUSDByDR = base.Columns["AmountUSDByDR"];
                this.columnAmountUSDByCR = base.Columns["AmountUSDByCR"];
                this.columnTEU = base.Columns["TEU"];
                this.columnETD = base.Columns["ETD"];
                this.columnETA = base.Columns["ETA"];
                this.columnOperatorName = base.Columns["OperatorName"];
                this.columnVesselVoyage = base.Columns["VesselVoyage"];
                this.columnSalesName = base.Columns["SalesName"];
                this.columnConsignerId = base.Columns["ConsignerId"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsignId = new global::System.Data.DataColumn("ConsignId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsignId);
                this.columnJobCode = new global::System.Data.DataColumn("JobCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobCode);
                this.columnIsVerifyed = new global::System.Data.DataColumn("IsVerifyed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVerifyed);
                this.columnBLNO = new global::System.Data.DataColumn("BLNO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLNO);
                this.columnContainerNo = new global::System.Data.DataColumn("ContainerNo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContainerNo);
                this.columnDiscPortName = new global::System.Data.DataColumn("DiscPortName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscPortName);
                this.columnLoadPortname = new global::System.Data.DataColumn("LoadPortname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoadPortname);
                this.columnDestinationName = new global::System.Data.DataColumn("DestinationName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDestinationName);
                this.columnConsignerName = new global::System.Data.DataColumn("ConsignerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsignerName);
                this.columnAgentName = new global::System.Data.DataColumn("AgentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentName);
                this.columnProfitByUSD = new global::System.Data.DataColumn("ProfitByUSD", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProfitByUSD);
                this.columnAmountUSDByDR = new global::System.Data.DataColumn("AmountUSDByDR", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountUSDByDR);
                this.columnAmountUSDByCR = new global::System.Data.DataColumn("AmountUSDByCR", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmountUSDByCR);
                this.columnTEU = new global::System.Data.DataColumn("TEU", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEU);
                this.columnETD = new global::System.Data.DataColumn("ETD", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnETD);
                this.columnETA = new global::System.Data.DataColumn("ETA", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnETA);
                this.columnOperatorName = new global::System.Data.DataColumn("OperatorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperatorName);
                this.columnVesselVoyage = new global::System.Data.DataColumn("VesselVoyage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVesselVoyage);
                this.columnSalesName = new global::System.Data.DataColumn("SalesName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesName);
                this.columnConsignerId = new global::System.Data.DataColumn("ConsignerId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsignerId);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobInfoRow NewJobInfoRow() {
                return ((JobInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JobInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JobInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JobInfoRowChanged != null)) {
                    this.JobInfoRowChanged(this, new JobInfoRowChangeEvent(((JobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JobInfoRowChanging != null)) {
                    this.JobInfoRowChanging(this, new JobInfoRowChangeEvent(((JobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JobInfoRowDeleted != null)) {
                    this.JobInfoRowDeleted(this, new JobInfoRowChangeEvent(((JobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JobInfoRowDeleting != null)) {
                    this.JobInfoRowDeleting(this, new JobInfoRowChangeEvent(((JobInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJobInfoRow(JobInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JobInfoSet ds = new JobInfoSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FeeOfJobDataTable : global::System.Data.TypedTableBase<FeeOfJobRow> {
            
            private global::System.Data.DataColumn columnCustomerName;
            
            private global::System.Data.DataColumn columnAmount;
            
            private global::System.Data.DataColumn columnRate;
            
            private global::System.Data.DataColumn columnIsPaid;
            
            private global::System.Data.DataColumn columnRecoupFlag;
            
            private global::System.Data.DataColumn columnDrCrFlag;
            
            private global::System.Data.DataColumn columnFeeName;
            
            private global::System.Data.DataColumn columnCurrencyEName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeeOfJobDataTable() {
                this.TableName = "FeeOfJob";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeeOfJobDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FeeOfJobDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CustomerNameColumn {
                get {
                    return this.columnCustomerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RateColumn {
                get {
                    return this.columnRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsPaidColumn {
                get {
                    return this.columnIsPaid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RecoupFlagColumn {
                get {
                    return this.columnRecoupFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DrCrFlagColumn {
                get {
                    return this.columnDrCrFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FeeNameColumn {
                get {
                    return this.columnFeeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyENameColumn {
                get {
                    return this.columnCurrencyEName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeeOfJobRow this[int index] {
                get {
                    return ((FeeOfJobRow)(this.Rows[index]));
                }
            }
            
            public event FeeOfJobRowChangeEventHandler FeeOfJobRowChanging;
            
            public event FeeOfJobRowChangeEventHandler FeeOfJobRowChanged;
            
            public event FeeOfJobRowChangeEventHandler FeeOfJobRowDeleting;
            
            public event FeeOfJobRowChangeEventHandler FeeOfJobRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFeeOfJobRow(FeeOfJobRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeeOfJobRow AddFeeOfJobRow(string CustomerName, decimal Amount, decimal Rate, bool IsPaid, bool RecoupFlag, short DrCrFlag, string FeeName, string CurrencyEName) {
                FeeOfJobRow rowFeeOfJobRow = ((FeeOfJobRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CustomerName,
                        Amount,
                        Rate,
                        IsPaid,
                        RecoupFlag,
                        DrCrFlag,
                        FeeName,
                        CurrencyEName};
                rowFeeOfJobRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFeeOfJobRow);
                return rowFeeOfJobRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FeeOfJobDataTable cln = ((FeeOfJobDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FeeOfJobDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomerName = base.Columns["CustomerName"];
                this.columnAmount = base.Columns["Amount"];
                this.columnRate = base.Columns["Rate"];
                this.columnIsPaid = base.Columns["IsPaid"];
                this.columnRecoupFlag = base.Columns["RecoupFlag"];
                this.columnDrCrFlag = base.Columns["DrCrFlag"];
                this.columnFeeName = base.Columns["FeeName"];
                this.columnCurrencyEName = base.Columns["CurrencyEName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomerName = new global::System.Data.DataColumn("CustomerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomerName);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.columnRate = new global::System.Data.DataColumn("Rate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRate);
                this.columnIsPaid = new global::System.Data.DataColumn("IsPaid", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsPaid);
                this.columnRecoupFlag = new global::System.Data.DataColumn("RecoupFlag", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRecoupFlag);
                this.columnDrCrFlag = new global::System.Data.DataColumn("DrCrFlag", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDrCrFlag);
                this.columnFeeName = new global::System.Data.DataColumn("FeeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFeeName);
                this.columnCurrencyEName = new global::System.Data.DataColumn("CurrencyEName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyEName);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeeOfJobRow NewFeeOfJobRow() {
                return ((FeeOfJobRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FeeOfJobRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FeeOfJobRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FeeOfJobRowChanged != null)) {
                    this.FeeOfJobRowChanged(this, new FeeOfJobRowChangeEvent(((FeeOfJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FeeOfJobRowChanging != null)) {
                    this.FeeOfJobRowChanging(this, new FeeOfJobRowChangeEvent(((FeeOfJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FeeOfJobRowDeleted != null)) {
                    this.FeeOfJobRowDeleted(this, new FeeOfJobRowChangeEvent(((FeeOfJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FeeOfJobRowDeleting != null)) {
                    this.FeeOfJobRowDeleting(this, new FeeOfJobRowChangeEvent(((FeeOfJobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFeeOfJobRow(FeeOfJobRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                JobInfoSet ds = new JobInfoSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FeeOfJobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class JobInfoRow : global::System.Data.DataRow {
            
            private JobInfoDataTable tableJobInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJobInfo = ((JobInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsignId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableJobInfo.ConsignIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsignId\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.ConsignIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobCode {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.JobCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobCode\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.JobCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVerifyed {
                get {
                    try {
                        return ((bool)(this[this.tableJobInfo.IsVerifyedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsVerifyed\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.IsVerifyedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLNO {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.BLNOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'BLNO\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.BLNOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContainerNo {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.ContainerNoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContainerNo\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.ContainerNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DiscPortName {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.DiscPortNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DiscPortName\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.DiscPortNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoadPortname {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.LoadPortnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LoadPortname\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.LoadPortnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DestinationName {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.DestinationNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DestinationName\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.DestinationNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsignerName {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.ConsignerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsignerName\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.ConsignerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentName {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.AgentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentName\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.AgentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ProfitByUSD {
                get {
                    try {
                        return ((decimal)(this[this.tableJobInfo.ProfitByUSDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProfitByUSD\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.ProfitByUSDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AmountUSDByDR {
                get {
                    try {
                        return ((decimal)(this[this.tableJobInfo.AmountUSDByDRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountUSDByDR\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.AmountUSDByDRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal AmountUSDByCR {
                get {
                    try {
                        return ((decimal)(this[this.tableJobInfo.AmountUSDByCRColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AmountUSDByCR\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.AmountUSDByCRColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal TEU {
                get {
                    try {
                        return ((decimal)(this[this.tableJobInfo.TEUColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TEU\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.TEUColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ETD {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJobInfo.ETDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ETD\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.ETDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ETA {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJobInfo.ETAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ETA\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.ETAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OperatorName {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.OperatorNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperatorName\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.OperatorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VesselVoyage {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.VesselVoyageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VesselVoyage\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.VesselVoyageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SalesName {
                get {
                    try {
                        return ((string)(this[this.tableJobInfo.SalesNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesName\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.SalesNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsignerId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableJobInfo.ConsignerIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsignerId\' in table \'JobInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJobInfo.ConsignerIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsignIdNull() {
                return this.IsNull(this.tableJobInfo.ConsignIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsignIdNull() {
                this[this.tableJobInfo.ConsignIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobCodeNull() {
                return this.IsNull(this.tableJobInfo.JobCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobCodeNull() {
                this[this.tableJobInfo.JobCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsVerifyedNull() {
                return this.IsNull(this.tableJobInfo.IsVerifyedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsVerifyedNull() {
                this[this.tableJobInfo.IsVerifyedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLNONull() {
                return this.IsNull(this.tableJobInfo.BLNOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLNONull() {
                this[this.tableJobInfo.BLNOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContainerNoNull() {
                return this.IsNull(this.tableJobInfo.ContainerNoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContainerNoNull() {
                this[this.tableJobInfo.ContainerNoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDiscPortNameNull() {
                return this.IsNull(this.tableJobInfo.DiscPortNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDiscPortNameNull() {
                this[this.tableJobInfo.DiscPortNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLoadPortnameNull() {
                return this.IsNull(this.tableJobInfo.LoadPortnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLoadPortnameNull() {
                this[this.tableJobInfo.LoadPortnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDestinationNameNull() {
                return this.IsNull(this.tableJobInfo.DestinationNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDestinationNameNull() {
                this[this.tableJobInfo.DestinationNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsignerNameNull() {
                return this.IsNull(this.tableJobInfo.ConsignerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsignerNameNull() {
                this[this.tableJobInfo.ConsignerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNameNull() {
                return this.IsNull(this.tableJobInfo.AgentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNameNull() {
                this[this.tableJobInfo.AgentNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProfitByUSDNull() {
                return this.IsNull(this.tableJobInfo.ProfitByUSDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProfitByUSDNull() {
                this[this.tableJobInfo.ProfitByUSDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountUSDByDRNull() {
                return this.IsNull(this.tableJobInfo.AmountUSDByDRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountUSDByDRNull() {
                this[this.tableJobInfo.AmountUSDByDRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountUSDByCRNull() {
                return this.IsNull(this.tableJobInfo.AmountUSDByCRColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountUSDByCRNull() {
                this[this.tableJobInfo.AmountUSDByCRColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTEUNull() {
                return this.IsNull(this.tableJobInfo.TEUColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTEUNull() {
                this[this.tableJobInfo.TEUColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsETDNull() {
                return this.IsNull(this.tableJobInfo.ETDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetETDNull() {
                this[this.tableJobInfo.ETDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsETANull() {
                return this.IsNull(this.tableJobInfo.ETAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetETANull() {
                this[this.tableJobInfo.ETAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorNameNull() {
                return this.IsNull(this.tableJobInfo.OperatorNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorNameNull() {
                this[this.tableJobInfo.OperatorNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVesselVoyageNull() {
                return this.IsNull(this.tableJobInfo.VesselVoyageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVesselVoyageNull() {
                this[this.tableJobInfo.VesselVoyageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalesNameNull() {
                return this.IsNull(this.tableJobInfo.SalesNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalesNameNull() {
                this[this.tableJobInfo.SalesNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsignerIdNull() {
                return this.IsNull(this.tableJobInfo.ConsignerIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsignerIdNull() {
                this[this.tableJobInfo.ConsignerIdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FeeOfJobRow : global::System.Data.DataRow {
            
            private FeeOfJobDataTable tableFeeOfJob;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FeeOfJobRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFeeOfJob = ((FeeOfJobDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CustomerName {
                get {
                    try {
                        return ((string)(this[this.tableFeeOfJob.CustomerNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CustomerName\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.CustomerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableFeeOfJob.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Rate {
                get {
                    try {
                        return ((decimal)(this[this.tableFeeOfJob.RateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Rate\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.RateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaid {
                get {
                    try {
                        return ((bool)(this[this.tableFeeOfJob.IsPaidColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsPaid\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.IsPaidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool RecoupFlag {
                get {
                    try {
                        return ((bool)(this[this.tableFeeOfJob.RecoupFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RecoupFlag\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.RecoupFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short DrCrFlag {
                get {
                    try {
                        return ((short)(this[this.tableFeeOfJob.DrCrFlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DrCrFlag\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.DrCrFlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FeeName {
                get {
                    try {
                        return ((string)(this[this.tableFeeOfJob.FeeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FeeName\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.FeeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyEName {
                get {
                    try {
                        return ((string)(this[this.tableFeeOfJob.CurrencyENameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CurrencyEName\' in table \'FeeOfJob\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFeeOfJob.CurrencyENameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCustomerNameNull() {
                return this.IsNull(this.tableFeeOfJob.CustomerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCustomerNameNull() {
                this[this.tableFeeOfJob.CustomerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableFeeOfJob.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableFeeOfJob.AmountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRateNull() {
                return this.IsNull(this.tableFeeOfJob.RateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRateNull() {
                this[this.tableFeeOfJob.RateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsPaidNull() {
                return this.IsNull(this.tableFeeOfJob.IsPaidColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsPaidNull() {
                this[this.tableFeeOfJob.IsPaidColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecoupFlagNull() {
                return this.IsNull(this.tableFeeOfJob.RecoupFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRecoupFlagNull() {
                this[this.tableFeeOfJob.RecoupFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDrCrFlagNull() {
                return this.IsNull(this.tableFeeOfJob.DrCrFlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDrCrFlagNull() {
                this[this.tableFeeOfJob.DrCrFlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFeeNameNull() {
                return this.IsNull(this.tableFeeOfJob.FeeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFeeNameNull() {
                this[this.tableFeeOfJob.FeeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrencyENameNull() {
                return this.IsNull(this.tableFeeOfJob.CurrencyENameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrencyENameNull() {
                this[this.tableFeeOfJob.CurrencyENameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class JobInfoRowChangeEvent : global::System.EventArgs {
            
            private JobInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobInfoRowChangeEvent(JobInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FeeOfJobRowChangeEvent : global::System.EventArgs {
            
            private FeeOfJobRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeeOfJobRowChangeEvent(FeeOfJobRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FeeOfJobRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591