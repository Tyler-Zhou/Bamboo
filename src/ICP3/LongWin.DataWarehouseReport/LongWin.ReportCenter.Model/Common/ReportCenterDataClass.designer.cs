#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace LongWin.ReportCenter.Model
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ICP2005_NEW")]
	public partial class ReportCenterDataClassDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertCostFee(CostFee instance);
    partial void UpdateCostFee(CostFee instance);
    partial void DeleteCostFee(CostFee instance);
    partial void InsertCostFeeDetail(CostFeeDetail instance);
    partial void UpdateCostFeeDetail(CostFeeDetail instance);
    partial void DeleteCostFeeDetail(CostFeeDetail instance);
    partial void InsertDeficitOperationWorkFlowLog(DeficitOperationWorkFlowLog instance);
    partial void UpdateDeficitOperationWorkFlowLog(DeficitOperationWorkFlowLog instance);
    partial void DeleteDeficitOperationWorkFlowLog(DeficitOperationWorkFlowLog instance);
    #endregion
		
		public ReportCenterDataClassDataContext() : 
				base(global::LongWin.ReportCenter.Model.Properties.Settings.Default.ICP2005_NEWConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public ReportCenterDataClassDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportCenterDataClassDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportCenterDataClassDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ReportCenterDataClassDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CostFee> CostFees
		{
			get
			{
				return this.GetTable<CostFee>();
			}
		}
		
		public System.Data.Linq.Table<CostFeeDetail> CostFeeDetails
		{
			get
			{
				return this.GetTable<CostFeeDetail>();
			}
		}
		
		public System.Data.Linq.Table<DeficitOperationWorkFlowLog> DeficitOperationWorkFlowLogs
		{
			get
			{
				return this.GetTable<DeficitOperationWorkFlowLog>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SPR_FIN_GetOperationIdForCommission")]
		public int SPR_FIN_GetOperationIdForCommission([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Xml")] System.Xml.Linq.XDocument message)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), message);
			return ((int)(result.ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_REP_CostFee")]
	public partial class CostFee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.DateTime _HappenDate;
		
		private int _HappenPeriod;
		
		private System.Guid _DeptID;
		
		private System.Guid _UserID;
		
		private decimal _Amount;
		
		private short _FeeProperty;
		
		private System.Guid _CompanyID;
		
		private string _no;
		
		private EntitySet<CostFeeDetail> _T_REP_CostFeeDetails;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnHappenDateChanging(System.DateTime value);
    partial void OnHappenDateChanged();
    partial void OnHappenPeriodChanging(int value);
    partial void OnHappenPeriodChanged();
    partial void OnDeptIDChanging(System.Guid value);
    partial void OnDeptIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnFeePropertyChanging(short value);
    partial void OnFeePropertyChanged();
    partial void OnCompanyIDChanging(System.Guid value);
    partial void OnCompanyIDChanged();
    partial void OnnoChanging(string value);
    partial void OnnoChanged();
    #endregion
		
		public CostFee()
		{
			this._T_REP_CostFeeDetails = new EntitySet<CostFeeDetail>(new Action<CostFeeDetail>(this.attach_T_REP_CostFeeDetails), new Action<CostFeeDetail>(this.detach_T_REP_CostFeeDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HappenDate", DbType="DateTime NOT NULL")]
		public System.DateTime HappenDate
		{
			get
			{
				return this._HappenDate;
			}
			set
			{
				if ((this._HappenDate != value))
				{
					this.OnHappenDateChanging(value);
					this.SendPropertyChanging();
					this._HappenDate = value;
					this.SendPropertyChanged("HappenDate");
					this.OnHappenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HappenPeriod", DbType="Int NOT NULL")]
		public int HappenPeriod
		{
			get
			{
				return this._HappenPeriod;
			}
			set
			{
				if ((this._HappenPeriod != value))
				{
					this.OnHappenPeriodChanging(value);
					this.SendPropertyChanging();
					this._HappenPeriod = value;
					this.SendPropertyChanged("HappenPeriod");
					this.OnHappenPeriodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeptID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DeptID
		{
			get
			{
				return this._DeptID;
			}
			set
			{
				if ((this._DeptID != value))
				{
					this.OnDeptIDChanging(value);
					this.SendPropertyChanging();
					this._DeptID = value;
					this.SendPropertyChanged("DeptID");
					this.OnDeptIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,3) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeProperty", DbType="SmallInt NOT NULL")]
		public short FeeProperty
		{
			get
			{
				return this._FeeProperty;
			}
			set
			{
				if ((this._FeeProperty != value))
				{
					this.OnFeePropertyChanging(value);
					this.SendPropertyChanging();
					this._FeeProperty = value;
					this.SendPropertyChanged("FeeProperty");
					this.OnFeePropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CompanyID
		{
			get
			{
				return this._CompanyID;
			}
			set
			{
				if ((this._CompanyID != value))
				{
					this.OnCompanyIDChanging(value);
					this.SendPropertyChanging();
					this._CompanyID = value;
					this.SendPropertyChanged("CompanyID");
					this.OnCompanyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_no", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string no
		{
			get
			{
				return this._no;
			}
			set
			{
				if ((this._no != value))
				{
					this.OnnoChanging(value);
					this.SendPropertyChanging();
					this._no = value;
					this.SendPropertyChanged("no");
					this.OnnoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostFee_CostFeeDetail", Storage="_T_REP_CostFeeDetails", ThisKey="ID", OtherKey="CostFeeID")]
		public EntitySet<CostFeeDetail> CostFeeDetails
		{
			get
			{
				return this._T_REP_CostFeeDetails;
			}
			set
			{
				this._T_REP_CostFeeDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_REP_CostFeeDetails(CostFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.CostFee = this;
		}
		
		private void detach_T_REP_CostFeeDetails(CostFeeDetail entity)
		{
			this.SendPropertyChanging();
			entity.CostFee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_REP_CostFeeDetail")]
	public partial class CostFeeDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ID;
		
		private System.Guid _CostFeeID;
		
		private System.Guid _CostItemID;
		
		private short _FeeProperty;
		
		private System.Guid _FirstCostItemID;
		
		private decimal _Amount;
		
		private string _Remark;
		
		private string _Currency;
		
		private EntityRef<CostFee> _T_REP_CostFee;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(System.Guid value);
    partial void OnIDChanged();
    partial void OnCostFeeIDChanging(System.Guid value);
    partial void OnCostFeeIDChanged();
    partial void OnCostItemIDChanging(System.Guid value);
    partial void OnCostItemIDChanged();
    partial void OnFeePropertyChanging(short value);
    partial void OnFeePropertyChanged();
    partial void OnFirstCostItemIDChanging(System.Guid value);
    partial void OnFirstCostItemIDChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    partial void OnCurrencyChanging(string value);
    partial void OnCurrencyChanged();
    #endregion
		
		public CostFeeDetail()
		{
			this._T_REP_CostFee = default(EntityRef<CostFee>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostFeeID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CostFeeID
		{
			get
			{
				return this._CostFeeID;
			}
			set
			{
				if ((this._CostFeeID != value))
				{
					if (this._T_REP_CostFee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostFeeIDChanging(value);
					this.SendPropertyChanging();
					this._CostFeeID = value;
					this.SendPropertyChanged("CostFeeID");
					this.OnCostFeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostItemID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CostItemID
		{
			get
			{
				return this._CostItemID;
			}
			set
			{
				if ((this._CostItemID != value))
				{
					this.OnCostItemIDChanging(value);
					this.SendPropertyChanging();
					this._CostItemID = value;
					this.SendPropertyChanged("CostItemID");
					this.OnCostItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FeeProperty", DbType="SmallInt NOT NULL")]
		public short FeeProperty
		{
			get
			{
				return this._FeeProperty;
			}
			set
			{
				if ((this._FeeProperty != value))
				{
					this.OnFeePropertyChanging(value);
					this.SendPropertyChanging();
					this._FeeProperty = value;
					this.SendPropertyChanged("FeeProperty");
					this.OnFeePropertyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstCostItemID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FirstCostItemID
		{
			get
			{
				return this._FirstCostItemID;
			}
			set
			{
				if ((this._FirstCostItemID != value))
				{
					this.OnFirstCostItemIDChanging(value);
					this.SendPropertyChanging();
					this._FirstCostItemID = value;
					this.SendPropertyChanged("FirstCostItemID");
					this.OnFirstCostItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(18,3) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Remark", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
		public string Remark
		{
			get
			{
				return this._Remark;
			}
			set
			{
				if ((this._Remark != value))
				{
					this.OnRemarkChanging(value);
					this.SendPropertyChanging();
					this._Remark = value;
					this.SendPropertyChanged("Remark");
					this.OnRemarkChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Currency", DbType="NVarChar(5)")]
		public string Currency
		{
			get
			{
				return this._Currency;
			}
			set
			{
				if ((this._Currency != value))
				{
					this.OnCurrencyChanging(value);
					this.SendPropertyChanging();
					this._Currency = value;
					this.SendPropertyChanged("Currency");
					this.OnCurrencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CostFee_CostFeeDetail", Storage="_T_REP_CostFee", ThisKey="CostFeeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public CostFee CostFee
		{
			get
			{
				return this._T_REP_CostFee.Entity;
			}
			set
			{
				CostFee previousValue = this._T_REP_CostFee.Entity;
				if (((previousValue != value) 
							|| (this._T_REP_CostFee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._T_REP_CostFee.Entity = null;
						previousValue.CostFeeDetails.Remove(this);
					}
					this._T_REP_CostFee.Entity = value;
					if ((value != null))
					{
						value.CostFeeDetails.Add(this);
						this._CostFeeID = value.ID;
					}
					else
					{
						this._CostFeeID = default(System.Guid);
					}
					this.SendPropertyChanged("CostFee");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_REP_DeficitOperationWorkFlowLog")]
	public partial class DeficitOperationWorkFlowLog : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private System.Guid _OperationId;
		
		private string _OperationType;
		
		private System.Guid _WorkFlowId;
		
		private System.Guid _CreateBy;
		
		private System.DateTime _CreateDate;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnOperationIdChanging(System.Guid value);
    partial void OnOperationIdChanged();
    partial void OnOperationTypeChanging(string value);
    partial void OnOperationTypeChanged();
    partial void OnWorkFlowIdChanging(System.Guid value);
    partial void OnWorkFlowIdChanged();
    partial void OnCreateByChanging(System.Guid value);
    partial void OnCreateByChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    #endregion
		
		public DeficitOperationWorkFlowLog()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OperationId
		{
			get
			{
				return this._OperationId;
			}
			set
			{
				if ((this._OperationId != value))
				{
					this.OnOperationIdChanging(value);
					this.SendPropertyChanging();
					this._OperationId = value;
					this.SendPropertyChanged("OperationId");
					this.OnOperationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationType", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string OperationType
		{
			get
			{
				return this._OperationType;
			}
			set
			{
				if ((this._OperationType != value))
				{
					this.OnOperationTypeChanging(value);
					this.SendPropertyChanging();
					this._OperationType = value;
					this.SendPropertyChanged("OperationType");
					this.OnOperationTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkFlowId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WorkFlowId
		{
			get
			{
				return this._WorkFlowId;
			}
			set
			{
				if ((this._WorkFlowId != value))
				{
					this.OnWorkFlowIdChanging(value);
					this.SendPropertyChanging();
					this._WorkFlowId = value;
					this.SendPropertyChanged("WorkFlowId");
					this.OnWorkFlowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateBy", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreateBy
		{
			get
			{
				return this._CreateBy;
			}
			set
			{
				if ((this._CreateBy != value))
				{
					this.OnCreateByChanging(value);
					this.SendPropertyChanging();
					this._CreateBy = value;
					this.SendPropertyChanged("CreateBy");
					this.OnCreateByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
