<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AlreadyContainCreatorRegisteredFormat" xml:space="preserve">
    <value>已经有一个创建注册的格式</value>
  </data>
  <data name="AreYouSureSaveForm" xml:space="preserve">
    <value>表单未保存，是否保存该表单文件？</value>
  </data>
  <data name="CantCreateDatasource" xml:space="preserve">
    <value>不能创建数据源.</value>
  </data>
  <data name="Cantopenfile" xml:space="preserve">
    <value>不能打开文件.</value>
  </data>
  <data name="CodeViewModeNotSupportThisFeature" xml:space="preserve">
    <value>在代码视图模式下,不支持该功能.</value>
  </data>
  <data name="DataSourceDesigner" xml:space="preserve">
    <value>数据源设计器</value>
  </data>
  <data name="ErrorOccuredInReadingToolboxConfigFile" xml:space="preserve">
    <value>具条配置文件时，发生错误．</value>
  </data>
  <data name="EventDoesNotExist" xml:space="preserve">
    <value>事件件{0}不存在类型{1}中.</value>
  </data>
  <data name="EventHasNotMethodBoundToIt" xml:space="preserve">
    <value>{0}事件没方法关联它.</value>
  </data>
  <data name="Failly" xml:space="preserve">
    <value>失败.</value>
  </data>
  <data name="FileNotExisted" xml:space="preserve">
    <value>文件不存在</value>
  </data>
  <data name="FormDesigner" xml:space="preserve">
    <value>表单设计器</value>
  </data>
  <data name="FormFile" xml:space="preserve">
    <value>表单文件</value>
  </data>
  <data name="FormNameCannotContainSpaceCharacter" xml:space="preserve">
    <value>名称不能包含空格等特殊字符．</value>
  </data>
  <data name="InvalidDesignerLoaderHost" xml:space="preserve">
    <value>designerLoaderHost无效。</value>
  </data>
  <data name="ItemHasNoTypeAttribute" xml:space="preserve">
    <value>Item不存在[Type]特性.</value>
  </data>
  <data name="ItemTypeCouldNotBeFound" xml:space="preserve">
    <value>Item类型{0}无法找到。</value>
  </data>
  <data name="llowedHere" xml:space="preserve">
    <value>这里不允许存在节点类型{0}.</value>
  </data>
  <data name="MethodRequiresArguments" xml:space="preserve">
    <value>方法{0}需要{1}个参数,而不是{2}个.</value>
  </data>
  <data name="MustInput" xml:space="preserve">
    <value>必须填写</value>
  </data>
  <data name="NoEventName" xml:space="preserve">
    <value>没有事件名称.</value>
  </data>
  <data name="NoMemberAttribute" xml:space="preserve">
    <value>不存在[Member]特性.</value>
  </data>
  <data name="NoPageDesign" xml:space="preserve">
    <value>没设计页面</value>
  </data>
  <data name="NotSupportTheFileFormat" xml:space="preserve">
    <value>不支持该文件格式</value>
  </data>
  <data name="ObjectTagMissingTypeAttribute" xml:space="preserve">
    <value>&lt;OBJECT&gt;标记是缺少必要的type属性</value>
  </data>
  <data name="OnlyAllowItemElements" xml:space="preserve">
    <value>只有Item元素是允许在集合，而不是{0}的内容。</value>
  </data>
  <data name="OnlyAllowPropertyElements" xml:space="preserve">
    <value>只有Property元素是允许在集合，而不是{0}的内容。</value>
  </data>
  <data name="PropertyDoesNotExist" xml:space="preserve">
    <value>属性{0}不存在类型{1}中。</value>
  </data>
  <data name="PropertyHasNoName" xml:space="preserve">
    <value>属性没名称.</value>
  </data>
  <data name="SaveChangeToDesigner" xml:space="preserve">
    <value>保存更改现有的设计?</value>
  </data>
  <data name="Successfully" xml:space="preserve">
    <value>成功．</value>
  </data>
  <data name="Tip" xml:space="preserve">
    <value>提示．</value>
  </data>
  <data name="TypeCouldNotBeLoaded" xml:space="preserve">
    <value>类型{0}不能被加载.</value>
  </data>
  <data name="UnableBindAnyEvents" xml:space="preserve">
    <value>事件绑定服务不存在，所以我们不能绑定任何事件</value>
  </data>
  <data name="UndefinedHostType" xml:space="preserve">
    <value>未定义的属主类型.</value>
  </data>
  <data name="UnexpectedElementType" xml:space="preserve">
    <value>未知元素类型{0}.</value>
  </data>
  <data name="UnsavedChanges" xml:space="preserve">
    <value>未保存的更改.</value>
  </data>
  <data name="WrongNameOrFileNotExisted" xml:space="preserve">
    <value>文件名错误或则该路径不存在该文件</value>
  </data>
  <data name="NoExistsConfigFile" xml:space="preserve">
    <value>具箱的配置文件不存在！</value>
  </data>
  <data name="FileIsexists" xml:space="preserve">
    <value>该文件已经存在，请重新命名</value>
  </data>
</root>