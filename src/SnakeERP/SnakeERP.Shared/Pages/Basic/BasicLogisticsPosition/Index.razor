@page "/Basic/BasicLogisticsPosition"
@using SnakeERP.ViewModel.Basic.BasicLogisticsPositionVMs;
@inherits BasePage
@attribute [ActionDescription("物流站点管理", "SnakeERP.Controllers,BasicLogisticsPosition")]

<WTSearchPanel OnSearch="@DoSearch">
    <ValidateForm Model="@SearchModel">
        <Row ItemsPerRow="ItemsPerRow.Three" RowType="RowType.Inline">

            <BootstrapInput @bind-Value="@SearchModel.Name"  />
            <BootstrapInput @bind-Value="@SearchModel.Phone1"  />
            <BootstrapInput @bind-Value="@SearchModel.Phone2"  />
            <BootstrapInput @bind-Value="@SearchModel.Phone3"  />
            <BootstrapInput @bind-Value="@SearchModel.Address"  />
        </Row>
    </ValidateForm>
</WTSearchPanel>



<Table @ref="dataTable" TItem="BasicLogisticsPosition_View" OnQueryAsync="OnSearch" IsPagination="true" IsStriped="true" IsBordered="true" ShowRefresh="false"
       ShowToolbar="true" IsMultipleSelect="true" ShowExtendButtons="true" ShowDefaultButtons="false" ShowExtendEditButton="false" ShowExtendDeleteButton="false" style="margin-top:10px;">
    <TableColumns>

        <TableColumn @bind-Field="@context.Name_view"  />
        <TableColumn @bind-Field="@context.Name"  />
        <TableColumn @bind-Field="@context.Contact"  />
        <TableColumn @bind-Field="@context.Phone1"  />
        <TableColumn @bind-Field="@context.Phone2"  />
        <TableColumn @bind-Field="@context.Phone3"  />
        <TableColumn @bind-Field="@context.Name_view2"  />
        <TableColumn @bind-Field="@context.Name_view3"  />
        <TableColumn @bind-Field="@context.Name_view4"  />
        <TableColumn @bind-Field="@context.Address"  />
    </TableColumns>
    <TableToolbarTemplate>
        @if (IsAccessable("/api/BasicLogisticsPosition/Add"))
        {
            <TableToolbarButton TItem="BasicLogisticsPosition_View" Color="Color.Primary" Icon="fa fa-fw fa-plus" Text="@WtmBlazor.Localizer["Sys.Create"]" OnClickCallback="OnCreateClick" />
        }
        @if (IsAccessable("/api/BasicLogisticsPosition/BatchDelete"))
        {
            <TableToolbarPopconfirmButton TItem="BasicLogisticsPosition_View" Color="Color.Primary"
                                          Icon="fa fa-fw fa-trash" Text="@WtmBlazor.Localizer["Sys.BatchDelete"]"
                                          OnConfirm="@OnBatchDeleteClick" Content="@WtmBlazor.Localizer["Sys.BatchDeleteConfirm"]" CloseButtonText="@WtmBlazor.Localizer["Sys.Close"]"
                                          ConfirmButtonText="@WtmBlazor.Localizer["Sys.BatchDelete"]" ConfirmButtonColor="Color.Danger" />
        }
        
        @if (IsAccessable("/api/BasicLogisticsPosition/Import"))
        {
            <TableToolbarButton TItem="BasicLogisticsPosition_View" Color="Color.Primary" Icon="fa fa-fw fa-upload" Text="@WtmBlazor.Localizer["Sys.Import"]" OnClickCallback="@OnImportClick" />
        }
        @if (IsAccessable("/api/BasicLogisticsPosition/ExportExcel"))
        {
            <TableToolbarButton TItem="BasicLogisticsPosition_View" Color="Color.Primary" Icon="fa fa-fw fa-download" Text="@WtmBlazor.Localizer["Sys.Export"]" OnClickCallback="@OnExportClick" IsAsync="true" />
        }
    </TableToolbarTemplate>
    <RowButtonTemplate>
        <div style="padding-right:10px;">
            @if (IsAccessable("/api/BasicLogisticsPosition/Edit"))
            {
                <TableCellButton Size="Size.ExtraSmall" Color="Color.Success" Icon="fa fa-edit" Text="@WtmBlazor.Localizer["Sys.Edit"]" OnClick="() => OnEditClick(context)" />
            }
            @if (IsAccessable("/api/BasicLogisticsPosition/{id}"))
            {
                <TableCellButton Size="Size.ExtraSmall" Color="Color.Info" Icon="fa fa-info" Text="@WtmBlazor.Localizer["Sys.Details"]" OnClick="()=>OnDetailsClick(context)" />
            }
            @if (IsAccessable("/api/BasicLogisticsPosition/BatchDelete"))
            {
                <PopConfirmButton Icon="fa fa-trash" Text="@WtmBlazor.Localizer["Sys.Delete"]" OnConfirm="() => OnDeleteClick(context)" Color="Color.Danger" Size="Size.ExtraSmall"
                                  Content="@WtmBlazor.Localizer["Sys.DeleteConfirm"]" CloseButtonText="@WtmBlazor.Localizer["Sys.Close"]" ConfirmButtonText="@WtmBlazor.Localizer["Sys.Delete"]" ConfirmButtonColor="Color.Danger" />
            }
        </div>
    </RowButtonTemplate>
</Table>

@code{

    private BasicLogisticsPositionSearcher SearchModel = new BasicLogisticsPositionSearcher();
    private Table<BasicLogisticsPosition_View> dataTable;


    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }

    private async Task<QueryData<BasicLogisticsPosition_View>> OnSearch(QueryPageOptions opts)
    {
        return await StartSearch<BasicLogisticsPosition_View>("/api/BasicLogisticsPosition/Search", SearchModel, opts);
    }

    private void DoSearch()
    {
        dataTable.QueryAsync();
    }

    private async Task OnCreateClick(IEnumerable<BasicLogisticsPosition_View> items)
    {
        if (await OpenDialog<Create>(WtmBlazor.Localizer["Sys.Create"]) == DialogResult.Yes)
        {
            await dataTable.QueryAsync();
        }
    }

    private async Task OnEditClick(BasicLogisticsPosition_View item)
    {
        if (await OpenDialog<Edit>(WtmBlazor.Localizer["Sys.Edit"], x => x.id == item.ID.ToString()) == DialogResult.Yes)
        {
            await dataTable.QueryAsync();
        }
    }

    private async Task OnDetailsClick(BasicLogisticsPosition_View item)
    {
        await OpenDialog<Details>(WtmBlazor.Localizer["Sys.Details"], x => x.id == item.ID.ToString());
    }

    private async Task OnBatchDeleteClick()
    {
        if (dataTable.SelectedRows?.Any() == true)
        {
            await PostsData(dataTable.SelectedRows.Select(x => x.ID).ToList(), $"/api/BasicLogisticsPosition/batchdelete", (s) => WtmBlazor.Localizer["Sys.BatchDeleteSuccess", s]);
            await dataTable.QueryAsync();
        }
        else
        {
            await WtmBlazor.Toast.Information(WtmBlazor.Localizer["Sys.Info"], WtmBlazor.Localizer["Sys.SelectOneRowMin"]);
        }
    }

    private async Task OnDeleteClick(BasicLogisticsPosition_View item)
    {
        await PostsData(new List<string> { item.ID.ToString() }, $"/api/BasicLogisticsPosition/batchdelete", (s) => "Sys.OprationSuccess");
        await dataTable.QueryAsync();
    }


    private async Task OnExportClick(IEnumerable<BasicLogisticsPosition_View> items)
    {
        if (dataTable.SelectedRows?.Any() == true)
        {
            await Download("/api/BasicLogisticsPosition/ExportExcelByIds", dataTable.SelectedRows.Select(x => x.ID.ToString()).ToList());
        }
        else
        {
            await Download("/api/BasicLogisticsPosition/ExportExcel", SearchModel);
        }
    }
    private async Task OnImportClick(IEnumerable<BasicLogisticsPosition_View> items)
    {
        if (await OpenDialog<Import>(WtmBlazor.Localizer["Sys.Import"]) == DialogResult.Yes)
        {
            await dataTable.QueryAsync();
        }
    }

}
